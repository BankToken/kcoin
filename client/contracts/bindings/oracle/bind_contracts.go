// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../truffle/contracts/oracle/ExchangeMgr.sol (4.153kB)
// ../../truffle/contracts/oracle/OracleMgr.sol (6.038kB)

package oracle

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TruffleContractsOracleExchangemgrSol = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4d\x6f\xdb\x38\x10\xbd\xfb\x57\x4c\x73\x28\x1c\xa3\xb6\xb6\x8b\xde\x0c\x2f\xda\xed\xf6\xd0\x43\xba\x45\xb7\x40\x0f\x86\xb1\xa0\xc5\xb1\x3c\x08\x45\x6a\x49\xca\x8e\x53\xe4\xbf\x2f\x44\x49\x14\x25\xcb\x1f\x71\x7c\x68\x0e\x8e\x2d\xce\x0c\xdf\x3c\xbe\x99\xa1\x32\xcd\x92\x94\x81\x51\x82\x38\xd9\x1d\xfc\x36\x79\x37\xf9\xfd\xdd\x74\x30\xa0\x34\x53\xda\xc2\x8d\xca\x50\x3e\x62\x96\xa1\x20\x39\xae\xcd\xa2\x58\x49\xab\x59\x6c\x4d\x24\x68\x85\xf1\x2e\x16\x18\x7d\x65\xb9\x61\x4b\x81\x13\xa3\xc4\xcd\xd4\x07\x78\x54\x66\x2c\x68\x19\xb8\xa4\x94\x68\x66\x49\x49\x13\x7d\x96\x64\x89\x09\x7a\x0c\x1c\x07\xd1\x68\x34\x78\x6f\xc9\x0a\x84\x4f\x0f\xf1\x9a\xc9\x04\xe1\x8e\x49\x96\xa0\x86\x3a\xca\x60\x14\x0d\xea\xef\xde\xea\x2e\xd1\x40\x06\x6a\x20\x6f\xa0\x15\x1e\x7e\x0e\x06\x00\x00\xd1\xc8\xfd\x83\x11\x7c\xda\xa0\xb4\xa6\xfa\x15\x95\xab\x58\x3c\x83\x1f\x6b\xb2\x28\xc8\x58\xe4\x43\x63\x35\xc9\x04\xb0\xda\xe4\x76\x1a\xd8\xfd\x29\x58\x7c\x7f\x86\xdd\x07\xce\xa9\xc8\xf8\xa8\xd1\x37\x4c\xd5\x86\x89\x1e\x9b\x0e\xee\x7f\xac\xd2\x2c\xc1\x36\xf0\x94\x65\x59\xe1\x56\xbb\xcf\xfe\xf0\xbc\xdc\x42\xa6\x69\xc3\x2c\xfa\x98\xdf\x30\x21\x63\xf5\xae\x0a\x5d\xba\xcc\x17\x90\xe5\x4b\x41\x31\x6c\xeb\xf4\x9b\xf5\x3c\xe0\x19\x7e\x96\x5b\x03\x40\x4e\xd2\x02\x49\x8e\x0f\x53\xff\x6c\xa9\x94\x00\x32\xb5\xf5\xde\x42\x40\x6e\xb9\xf6\xe4\x3e\x3b\x49\xde\x29\x4e\x2b\x42\xdd\x9c\x8f\x37\x4a\xab\x25\x50\x52\xec\xbe\xe0\xf6\x23\x93\x9c\x38\xb3\x58\xe7\x2e\x59\x8a\xb7\x01\x4a\x8d\xff\xe5\xa4\x71\xf8\xaa\x41\x35\x74\x36\x6f\xe0\xa6\xa6\x04\x98\xd0\xc8\xf8\x0e\xf0\x81\x8c\x35\x37\xb7\x0d\xee\x7f\x6b\x98\xfb\xbb\xfb\x70\x27\x76\xee\xd9\x38\xa1\x0d\x4a\xe7\x50\x88\x56\x2a\x0b\x4c\xfa\x03\x3a\x73\xfb\x80\xca\xf3\x91\xf4\x39\x1d\x01\xd5\xa8\x01\xf9\x73\xf1\x05\xf5\x71\x3e\xbe\x3e\xa7\x63\xf8\x96\x8d\xfd\x71\x7c\x3d\x2a\xfb\x5a\x0a\x7e\x95\xcb\xd8\x75\xa4\x76\x4d\x15\x9d\xa8\x32\x7c\xcf\x71\x53\x94\xb1\x01\x26\x79\x43\x89\x09\x0f\x6d\xe2\x8d\x33\xa6\x59\x5a\xc2\xf4\xfa\x2a\x7e\x4d\x5a\x62\xae\x77\x05\xc6\x0f\xd0\xe3\xeb\x11\xe5\x17\x65\x8b\xc6\x86\xdc\x11\xfb\xf7\x56\xf6\xe9\xbf\x4b\xaa\xaf\x58\x8f\x62\xb6\xd7\x03\xe6\x85\xd3\xa2\xa1\xcb\x67\xd3\x68\x16\x66\x60\x75\x1e\x54\x32\xa6\x14\x34\x35\xb7\x6b\xb3\xe8\xc9\x69\x9f\x5e\x4b\x25\x5d\x66\x5d\xef\xc3\xeb\xb0\xa9\x5d\xac\x8b\x09\x6d\xa3\x0e\xc8\xe4\x28\xb0\xa7\x87\xee\xf1\x57\x70\x53\xf7\xf2\xd3\x99\xff\xb8\xae\x94\xf6\xc9\x7f\x6e\xfe\x07\xcb\x2f\xa0\xa2\x9f\x83\x89\x1b\x04\x30\x6b\x40\x4c\xb2\xdc\xac\x2b\xef\x31\xbc\xdd\x17\x59\x37\x40\xd8\x9c\xfa\x55\x17\x8e\xe6\xd3\xec\xfa\x64\xae\xc3\xae\x6f\x35\x17\xb3\x7b\xb0\xf9\xbe\xb0\x6a\xdd\x20\xd6\x6a\xfb\x5d\xfd\x55\xca\x74\x16\x14\x72\x7b\x3e\x07\x05\xde\x66\x7b\xc5\x84\xc1\x6a\xe4\xbb\xbf\x28\x02\x8d\x99\x60\x31\x82\x5d\x23\x70\xcc\x34\xc6\xac\x30\xd6\x18\x2b\xcd\x61\x4b\x76\xed\x96\x04\x33\x16\x50\x60\x8a\xd2\x7a\xff\x8a\x9b\x7b\xdc\x7d\x57\x77\x6a\x83\xa1\x32\xe6\x8d\x46\x04\xca\xc4\xae\xc7\x6f\x17\x3d\x2d\x64\x1e\xa4\xb4\x80\x59\x13\xeb\x88\x94\xbc\x4d\x23\xc8\x20\x4a\xcf\x26\x35\x82\xf1\xd4\x4f\x08\x2f\xb7\xf0\x86\x77\x5a\x6e\xf1\x1a\xe3\x7b\x53\x08\xc0\xae\x51\x3b\x66\xda\x13\x8b\xc9\xde\x71\x0a\x4a\x17\xc3\xec\x52\x59\x06\xb7\x8b\x3e\x3d\x6e\x08\xb7\xa0\xd1\xe6\x5a\x1a\x18\x56\xb7\xb0\xcf\x92\x23\xf2\xf6\x04\x2e\x2c\x0e\x97\x66\xfb\x42\xf7\xab\x31\x70\xf2\x2a\x74\x11\x19\xdd\x7b\x1b\xbc\x7e\x7d\x56\xef\x7a\x21\x47\xbd\x77\x9a\x17\x53\x74\xf2\x36\x76\x35\x8a\x5e\xbd\x98\xa3\x04\x6d\xbf\x4e\x62\x95\xd7\x2d\xa6\x9b\x61\x82\xb6\x47\x05\x1f\x0b\x87\xe1\x81\xe4\x5c\xdb\x74\x21\x7b\x32\xeb\x36\x88\xcb\x00\x93\x5c\x29\x9d\xba\x17\xde\xce\xd1\x95\xdd\xa9\xfc\x54\x2b\x60\x95\x0a\x02\x4f\xa7\x0d\x1f\xf5\x39\x59\x7f\xb0\xc5\x81\x3d\x0c\x9b\x17\xb4\x03\x0c\x1c\xbc\x8e\xb7\x29\x98\xbb\x18\x8b\x9a\x82\xa7\xff\x03\x00\x00\xff\xff\x58\x5f\x53\x77\x39\x10\x00\x00")

func TruffleContractsOracleExchangemgrSolBytes() ([]byte, error) {
	return bindataRead(
		_TruffleContractsOracleExchangemgrSol,
		"../../truffle/contracts/oracle/ExchangeMgr.sol",
	)
}

func TruffleContractsOracleExchangemgrSol() (*asset, error) {
	bytes, err := TruffleContractsOracleExchangemgrSolBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../truffle/contracts/oracle/ExchangeMgr.sol", size: 4153, mode: os.FileMode(420), modTime: time.Unix(1537634359, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf1, 0x93, 0x67, 0x2a, 0x57, 0x52, 0xab, 0x65, 0xd6, 0x8e, 0x6, 0xb0, 0x89, 0x13, 0xe8, 0x2e, 0x43, 0xa1, 0x3a, 0xaa, 0xc0, 0xd6, 0x76, 0x5a, 0x5c, 0x68, 0xe7, 0x66, 0xe7, 0xde, 0xf8, 0x38}}
	return a, nil
}

var _TruffleContractsOracleOraclemgrSol = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5f\x6f\xdb\x38\x12\x7f\xf7\xa7\x98\xcb\x43\x21\x05\x89\xdc\xf6\xfa\xd4\x9c\x8b\x06\x29\xee\xae\x58\x24\x35\x9a\xee\x53\x10\x04\xb4\x38\x96\x89\x48\xa4\x96\xa4\x9c\x38\x45\xbe\xfb\x82\x12\x45\x91\x94\xd5\xa4\xdd\x02\x8b\xc5\xae\x1f\x6c\x99\x33\x1c\xce\x9f\xdf\x0c\x47\x53\x4b\x52\x54\x04\x94\x28\x19\x65\x7a\x07\x2f\xb3\x37\xd9\xeb\x37\x27\xb3\x19\xab\x6a\x21\x35\x1c\x88\x1a\xf9\x03\xd6\x35\x96\x8c\x1f\xf7\x6c\xf3\x5c\x70\x2d\x49\xae\xd5\xbc\x64\x6b\xcc\x77\x79\x89\xf3\x25\x69\x14\x59\x95\x98\x29\x51\x1e\x9c\x38\x01\xd9\xfc\x4c\x70\x85\x5c\x35\x2a\xa6\x64\xf3\x5b\xae\xe6\x1f\x44\x45\x18\xff\x8c\x4a\x94\x5b\x94\x21\xcf\xd7\x0b\x52\xe1\xff\x89\xda\x3c\xc2\x5a\x8a\xaa\xdd\xd3\x68\x56\xaa\x79\x4f\x88\x64\x3e\x08\x75\x5c\xb2\x95\xa7\x60\xc5\x0a\x49\x34\x13\x5c\xcd\x3f\x72\xa6\x19\x29\xd9\x83\xa7\xe6\x6c\x7e\x78\x38\x7b\xaf\x99\x2e\x11\x3e\x49\x92\x97\x08\xe7\x84\x93\x02\x25\xf4\x32\x66\x87\xf3\x59\xff\x6c\x79\xce\x0b\x09\x4c\x41\x6f\xf2\x11\x04\xa2\xe1\xeb\x0c\xcc\xa7\xfd\x6e\x18\xd7\x50\x37\xab\x92\xe5\x50\x91\xfb\x8b\xa6\xea\x44\xa8\x93\x11\x59\xed\x78\xfe\x5f\x89\xbf\x35\xc8\xf3\xdd\x98\xdc\xd4\x94\x68\x5c\xa2\x64\x82\x8e\xa9\xb5\x64\x39\x76\xcb\xa1\x47\x7b\x86\x5b\xae\xfa\xa5\x8e\x6d\xb5\xd3\xa8\xfe\xfd\x1a\xb8\xa0\x68\xdc\xb9\x21\x6a\x73\x32\x6b\x49\x4a\xcb\xc6\x19\xbb\x34\x92\x7b\x9b\xdc\xa9\xc3\x71\xe6\x43\x28\x95\xa8\x14\x88\x76\x47\xb7\xfe\xb8\x47\x56\x2c\x86\x71\x8a\xf7\x83\x98\x95\x10\x25\x30\xf5\xc9\x93\xe2\x96\x37\x44\x5d\x36\xab\x8a\x69\x8d\x74\x39\x9c\xfe\x38\x73\xae\xae\x48\x5d\x33\x5e\x40\xd2\x6b\xb3\x78\x67\x8f\x4d\x8d\xbe\x5b\xa2\xd1\x2a\xf8\x19\x0b\xa6\xb4\xb4\x4e\x6e\xbf\xe6\x73\x4b\x5b\x9a\xc3\x4c\xbc\x09\xe3\x0a\xf4\xa6\xdf\x03\x8c\x22\xd7\x26\x49\x84\xa4\x28\x91\xc2\x6a\xd7\x92\x57\xac\x28\x50\x69\xa0\x58\x0b\xc5\x34\x68\xd1\x0b\x34\x54\x55\x91\xb2\xf4\xc8\xd9\xcc\xf3\xd7\xd5\x75\xa4\x98\x39\xdc\xc6\xc0\x73\xbe\xc7\xd6\xfa\x5d\x59\x96\x4a\x50\xb6\x66\x28\x41\xf0\x72\x37\x72\xb0\x41\x12\x93\x98\xf4\xfe\x4c\x2a\x55\x64\x0a\x39\x45\x99\xa6\x83\x73\x6f\x82\x68\x05\x22\x2f\xf0\xee\x8c\x70\xca\x0c\xee\xf6\x08\xfe\xd7\x8f\x4b\xbe\x6c\x6a\x94\x17\x82\xee\x13\xeb\xea\x45\xe2\x41\x36\x33\x1e\x4b\x7c\xa8\xa6\x69\xc6\x94\x93\xf3\xfd\x2a\x7c\xe2\xf9\x5e\xa3\x42\x84\x5c\x0d\x72\xaf\xb3\x11\x04\x27\x4f\x32\x55\xa5\x5d\x3e\x04\x63\x4e\x9b\x02\x42\x66\xfd\xda\xfb\x9a\x48\x52\xc1\x4d\x50\x10\xe0\x9c\xdc\xb3\xaa\xa9\x80\x37\xd5\x0a\xa5\x02\xb1\xb6\x20\x50\xa3\x8d\x41\xa9\x80\xcb\x1d\xcf\x37\x52\x70\xf6\x80\xb0\x76\xab\x6b\x21\x27\xf7\xfb\xb5\x04\x7e\x6d\xff\x40\xdd\xfe\x1b\xb1\x4a\x1b\x81\x53\x4a\x25\x9c\xf6\x79\xbe\x86\x5f\x2e\x2e\xc1\x45\xc7\x6e\x9a\xb7\xbf\xeb\x86\xe7\xa6\xe2\x0e\xc5\x32\x09\xb3\x3e\xb4\xfb\x28\x22\x06\xb6\xc5\x44\x5f\xf1\xa3\x51\xf9\x09\x94\x4d\xbb\xc4\xb6\xe5\x6f\x1c\xe9\xc8\xfb\xef\xe0\x65\x6a\xf3\xca\xa6\xaf\x51\x04\x90\x9b\x92\x4e\xdd\x3a\x5b\x43\x12\xb9\xdf\xec\xf4\xe4\x07\x67\x04\x8e\x7e\x07\x2f\xe1\xc5\x8b\xc8\xfb\xff\x59\x44\x26\x7b\xa0\x7a\x74\x4f\xee\x21\x54\x7a\x11\xf9\x72\xd8\x1a\xaa\x18\x9f\x31\xf0\x05\xba\x2c\x42\xdd\x06\x2e\x2f\x13\x61\x11\x5d\x30\x49\xe8\xf5\x61\x93\x9f\xad\xb0\x00\x77\x65\x73\xbb\x96\x1c\x6c\x49\x69\x8a\x8b\x90\x55\x21\xb3\x5b\x71\x47\x4a\x72\x90\x06\x89\xe4\x67\x92\xbb\x64\x71\x80\x98\x01\xf9\x52\x8a\xfb\x1d\x2c\x89\xd6\x28\xf9\xdf\x2d\xc7\x98\x73\xca\x9f\x99\x64\x4c\x0d\xc1\x91\xff\xa4\xdd\x5f\x3a\xed\xe2\x0b\xec\x3d\xc5\x2d\x9c\x6d\x30\xbf\x55\x26\x0c\x05\xdb\x22\x77\x60\x60\xca\xe2\x3f\x82\xb4\x6b\x96\x3c\x34\x93\xfe\x46\x98\x82\x72\xdf\x4e\x38\xe1\x56\x48\xda\xa3\x69\xcb\xf0\x0e\x24\xea\x46\x72\x05\x89\xed\x16\x3f\x72\x8a\x48\xd3\x00\x6a\x86\x23\xea\xf5\xae\x7a\x69\xd7\x59\xd8\x61\x8e\xaf\x6c\xdf\x62\xb2\x25\xac\x24\x2b\x56\xb6\x9d\x5f\x5f\x2d\x4c\x9f\xb6\xdf\x88\x9b\x0d\x51\xa7\xde\x9e\x64\xe8\x3d\xf7\x68\x6f\xa5\x9b\x0e\x75\xa4\x7e\x12\x62\xee\xd8\x6b\x11\xb3\x12\x79\xa1\x37\xa9\x81\xf6\x37\x8d\xf8\x80\x25\x6a\x54\x36\x68\xe2\x67\x45\xea\x86\xb6\x72\xa7\xc3\x65\x2d\x1e\x6c\xb2\xdd\xa9\x6d\xa5\x17\x93\xb1\x39\x09\x4b\x91\x14\x77\x5f\x44\x67\x84\xdb\x94\x45\x2f\x0d\x9d\x2e\xcf\x90\xe8\x17\x19\x89\x75\x49\x72\x6c\x5b\x74\x8a\xb5\xc4\x9c\x68\xa4\x20\x31\x17\x92\xc2\x1d\xd3\x9b\x96\x54\x12\xa5\x01\x4b\xac\x90\xeb\x51\x21\xbc\xc5\xdd\x17\x71\x2e\xb6\x83\x6a\x26\x36\x57\xa3\x30\x1d\xbf\xf2\x94\xf0\x18\x3d\xe3\xae\x61\x31\x88\x8b\x99\x9d\x4d\x8e\xe3\xba\xf3\x01\x2c\x7c\x07\xed\x3b\xa3\xd7\xe0\xf8\xc4\xf7\xc1\x04\x58\x3e\x72\x85\x52\xab\x3f\x00\x93\x9e\xb9\x7f\x15\xfa\x60\x7f\x49\x55\x89\xa6\xf7\xe0\x08\x4c\xac\x3d\x77\x02\x4c\x47\x1d\x10\xac\xc4\x9f\x03\x2d\x1f\x47\x41\xec\xb2\xba\x51\x9b\x64\xc0\xf1\x31\xbc\x1a\xef\xb2\xc5\x03\x16\xa0\x65\xf3\xed\x1a\xf2\x3f\x74\x2f\xbe\xf9\xb4\x03\x0a\xb4\xc6\x9f\x19\x9e\x64\xa2\xda\xb5\x6e\x68\xa5\x4c\x96\x3a\x2f\xe2\xcf\x55\x8b\xf1\xb5\x90\x55\x3b\x20\x89\x03\xde\x7a\xa7\xfb\xf6\x63\x0d\x5a\x40\x6e\x6a\xe3\x44\x6d\x70\xd6\x9c\x6a\x53\x99\xef\x93\xe1\x45\x7f\xc2\xb2\x3e\xe4\xb9\xa0\x41\x1d\x34\xff\xc3\xd4\x6a\xa5\x78\x81\x7c\x22\xf4\x46\xc0\xf5\x93\x9e\x50\xe6\x95\x4e\x29\x26\xb8\x7a\x22\x4a\xed\x3b\xdf\x8f\x07\xa9\x7b\x77\x7f\x6e\x80\x7c\xb5\x9e\x1f\x25\x6f\xdb\x33\x02\xd5\x1a\xf4\xec\x38\x0d\x83\x9f\xa3\x68\xe0\x93\x8e\xd2\xb1\x1b\x1a\x09\xef\x79\x61\xed\x1f\x05\xb1\xb6\x64\x8f\x39\x8b\xc6\x4b\x51\x80\x3b\x9e\x3d\xb3\xa6\xd8\x8f\x1d\x12\x4c\x9f\x4f\x80\xe3\x1d\xe4\x6e\x9a\x41\xa2\x32\x17\xf9\x46\xda\x8d\xb6\x28\x39\x87\xd4\x64\xd7\x4e\xf8\xee\x36\xc8\x2f\x84\x5e\x92\x46\x21\x1d\xcf\x4a\x9e\x1a\x71\x8c\x9b\x04\x7f\x92\x10\xd4\xc3\x61\xfe\x70\x04\xe6\x79\x4b\xca\x06\xd3\x27\x2e\x7d\xe9\xec\x36\x97\x58\xa5\x0a\xe8\x44\x74\x53\x54\x6f\xa6\xa5\x70\x02\xed\x14\xa7\x5c\x30\x36\x7d\x34\x79\x0a\xdb\x03\x6f\x32\xf3\x4d\xb5\x4f\x29\x55\x1d\x18\xe2\xd7\xa3\x0e\x21\x3e\x29\xd2\xb6\x05\x7d\x87\xe6\x0e\xa5\xdd\x96\xa7\x75\xde\x33\x08\xfa\x9e\xf9\x4f\x70\x07\x38\x2c\xab\xee\x1a\xf1\x12\x21\xf9\xda\x12\xde\x5a\xbd\x8e\xec\x21\x6f\x61\x90\xfe\x98\x3a\xef\x3c\xfe\x1e\x00\x00\xff\xff\x45\x71\x89\xc6\x96\x17\x00\x00")

func TruffleContractsOracleOraclemgrSolBytes() ([]byte, error) {
	return bindataRead(
		_TruffleContractsOracleOraclemgrSol,
		"../../truffle/contracts/oracle/OracleMgr.sol",
	)
}

func TruffleContractsOracleOraclemgrSol() (*asset, error) {
	bytes, err := TruffleContractsOracleOraclemgrSolBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../truffle/contracts/oracle/OracleMgr.sol", size: 6038, mode: os.FileMode(420), modTime: time.Unix(1535712721, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x95, 0xc1, 0x79, 0x3d, 0x36, 0x44, 0xd1, 0x5f, 0xc9, 0xe6, 0xa6, 0xdc, 0x3f, 0x59, 0x2e, 0xa1, 0x6c, 0x52, 0xeb, 0xcc, 0xc0, 0x9b, 0xa, 0x81, 0x96, 0x5d, 0xe0, 0xe6, 0xfc, 0xa6, 0xae, 0x20}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../truffle/contracts/oracle/ExchangeMgr.sol": TruffleContractsOracleExchangemgrSol,

	"../../truffle/contracts/oracle/OracleMgr.sol": TruffleContractsOracleOraclemgrSol,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"truffle": &bintree{nil, map[string]*bintree{
				"contracts": &bintree{nil, map[string]*bintree{
					"oracle": &bintree{nil, map[string]*bintree{
						"ExchangeMgr.sol": &bintree{TruffleContractsOracleExchangemgrSol, map[string]*bintree{}},
						"OracleMgr.sol":   &bintree{TruffleContractsOracleOraclemgrSol, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
