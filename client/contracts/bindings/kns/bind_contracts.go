// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../truffle/contracts/kns/PublicResolver.sol (8.606kB)
// ../../truffle/contracts/kns/FIFSRegistrar.sol (1.376kB)
// ../../truffle/contracts/kns/KNSRegistry.sol (3.236kB)

package kns

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TruffleContractsKnsPublicresolverSol = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x6d\x4f\x2b\xb7\x12\xfe\x9e\x5f\x31\xb7\x1f\x8e\x02\x82\x90\x10\xa0\xa0\x74\x8f\x1a\x20\x57\x8d\xb8\xa4\x08\x52\xa9\xd5\x51\x85\x9c\xdd\x49\x62\x65\xd7\xde\xda\xde\x90\x3d\xed\xf9\xef\x57\xf6\xbe\xbf\x25\x21\x48\x6d\xf9\x70\xc2\x71\x3c\xe3\xf1\x33\xe3\x67\x66\x6c\x7c\x41\x16\x1e\x01\xc9\x5d\xea\x50\x15\x42\xb7\x73\xd1\x39\xbf\x18\xb4\x5a\xd4\xf3\xb9\x50\xf0\x5d\xe7\xec\x61\xf2\xd2\x91\xdc\xfd\x6e\x90\x8e\x7d\xe5\xf2\xd4\xa5\xb3\x33\x9b\x33\x25\x88\xad\xe4\x99\x47\x17\x82\x28\xca\x99\x3c\x1b\x33\xaa\x28\x71\xe9\x57\x32\x73\x31\x16\x6c\x9d\x1d\x1f\xb7\xe0\x18\x86\x20\xa9\xe7\xbb\x08\x02\x25\x77\xd7\x28\x80\xb0\x90\x33\x04\x9b\x30\x08\x24\x0e\x80\x33\x37\x04\xe2\xba\xfc\x4d\x82\x5a\x22\xf0\x37\x86\x02\xf8\x1c\x08\x30\xee\x20\x28\x0e\x12\x15\x50\x25\xb5\x3e\xe2\x38\x02\xa5\xec\xb4\xe0\xf8\xac\x95\x58\x03\x4f\xc1\xcc\xa5\xf6\x73\xb2\x04\x95\x50\xb0\x09\xfe\x6c\xb5\x00\x00\x66\xa1\x42\x79\x01\x36\x67\x52\x11\xa6\x60\x3c\x99\x8e\x9e\xff\x3b\xbc\x1b\xbd\x3e\x8e\xa6\xc3\xd7\xf1\x3d\x58\xd0\xdd\x74\x7b\xf3\xb9\x7d\x43\xbe\x1f\xd4\xca\x0c\xef\xef\x9f\x5f\x33\xc1\x58\xa6\x3f\xeb\xcf\x2e\xbf\x77\xb0\x5e\xe6\xee\xe7\xc9\x74\x34\x99\x56\xc5\x9c\xeb\xfe\xf5\x8d\x63\x5f\xd6\x8b\x4d\x86\x8f\xa3\xaa\xcc\xd5\x4d\x6f\xde\xbf\xe8\xf7\x1a\xcc\xbb\x1d\x57\x45\xce\xcf\xbb\x7d\x32\xbb\xbc\xaa\x17\x79\xfa\xe5\xf6\x61\xf4\x5b\x55\xca\xbe\xbe\xba\xe9\x9e\xf7\xfb\xf5\x52\xd3\xd1\xaf\x35\x1b\xba\xbc\x71\x7a\xce\x45\xdf\xae\x97\x79\xfc\xe5\x7f\xd3\xf1\x4f\xc3\x97\x9f\xaa\x82\x78\x7d\x73\xd1\xed\x91\xde\x20\xf2\x14\xae\x51\x6f\xc6\x71\xc4\xdd\x92\xb0\x05\x3a\x6d\xa3\xab\x7f\x0e\x94\x39\xb8\x41\xc7\xc4\xc6\x49\x12\x0e\x40\x8e\x06\x39\xb9\x3b\xce\x14\x32\xb5\x5d\x34\x19\x5d\x12\xb9\x2c\x48\x4f\x88\x87\xdb\x45\xa5\x12\x94\x2d\x80\x11\x0f\x0b\x92\xc3\xdb\xf1\x76\xc1\x80\x32\x75\x7e\x79\x95\x8e\xda\x91\xa1\xd3\xd0\x2f\x2a\x7a\x0a\x66\x2b\x0c\xf7\xb3\x7f\x93\xfd\x1a\x16\x94\x4c\x71\xb3\x03\x82\x78\x1f\xf1\xe0\x03\x86\xe9\xd0\x0a\x8b\xba\x1e\x03\x57\x51\x8d\xd4\x1e\x36\x25\x88\x1a\x71\xa9\x44\x90\x1e\xd0\x07\x0c\xe1\x4f\x33\x9c\x46\x87\xde\xc0\xa0\x32\x14\x46\x43\xdf\x0a\x3a\x9e\xd1\xe6\xc2\xc9\x29\x48\x9d\xef\x38\xa2\xaa\x23\xc6\x36\xfb\x22\xe7\xb5\x6c\x30\x33\xcc\x37\x98\x67\xdf\x78\xc4\xf7\x29\x5b\xb4\x23\x31\xeb\x73\xf4\x79\x04\x0a\x37\xaa\x3a\x2b\xf6\xac\xf5\xd9\x2c\x7f\x04\x64\x46\x65\xc9\x26\xf0\x12\x10\x0b\xbb\x7b\x98\xbc\xc0\x8a\xc9\x18\xaf\x58\x1f\xa4\x00\x5b\x9f\xe3\x8d\x1f\x81\x30\x9f\xe9\x4c\xee\xd0\x39\xd5\x54\xc9\xdc\xf0\xd5\xb0\x66\x2a\xa4\xbd\x71\x94\x43\x4a\xe0\x1f\x01\x15\xd8\x5e\x31\xd9\x89\x66\x46\x33\x2c\x0b\x3c\xb9\xe8\x48\x64\x0e\x8a\xa3\xcc\xde\xd7\x82\x85\x86\xca\xf5\xcf\xb1\x3e\x59\x91\x37\xb8\xe8\x24\x63\x3f\xfa\x44\x10\x4f\xef\x41\x9f\x57\x98\x2e\xd1\xec\x49\xe0\x82\x4a\x25\x88\x80\x84\xa6\x13\x89\x33\xf3\x69\x67\xaa\xda\x31\x06\x5a\xfe\x48\x3b\xc2\xa5\x76\xce\xfa\x15\x93\x60\x25\xdf\x37\x59\xf6\xa3\x83\x6b\xa0\x09\xeb\x23\xcc\x03\x66\xeb\xf4\x04\x73\x2e\xe0\x49\xf0\x4d\x08\x4f\x44\x29\x14\x6c\x9b\xe1\x49\x48\xf1\xb9\xc9\x45\xb9\x7d\x84\x45\xeb\x53\xf5\xd9\x92\xc5\x5d\x50\x99\xa6\x20\x14\x07\xee\xe9\x05\x55\x94\x13\xd3\x48\x97\x92\xdb\x94\x28\x74\xe0\x8d\xaa\x25\x10\x66\x4c\xd4\xce\x4c\x77\xf5\x48\xc2\x28\xa7\xce\x74\x92\x75\x5d\x74\x60\x16\x16\x33\xab\x5a\x12\x15\x25\x57\xca\x1a\xf7\x99\xc0\x63\xe6\x69\x6c\x92\x6c\x1c\xf8\x0e\x51\x58\x9e\x46\xca\x10\x46\x79\xbb\x01\x35\x89\x4a\x6f\xbc\x10\xb0\x27\x85\x03\x9d\xc6\x41\x2e\xbc\xab\x61\x6d\x0e\xc4\x17\x3d\xfe\x7b\xc7\x58\x60\x95\xd8\x00\x3d\x5a\xcc\x23\xd9\x4a\x47\x3b\x61\x8f\x29\xc4\x10\xda\xdf\x8b\xfd\x84\x2b\x8c\xa6\xaa\x25\x95\xa6\x78\x0a\x84\x8d\xa0\x42\x1f\x75\x79\xc3\xb8\x02\x9d\x53\x1d\x22\x1c\xfa\x15\x9d\x13\x20\x4c\xdb\xe5\xba\xe0\xd2\x15\xba\x21\xd8\x66\xbf\x89\x3e\xca\x60\x1e\xa8\x40\x18\x07\x92\x92\xbe\x19\x91\xe8\x00\x67\x19\x41\x1d\x18\x03\x06\xa7\x69\x19\xb8\x28\x10\x1a\xe3\x20\x4e\xd6\xa5\x50\x28\x64\xe7\x77\x87\x42\xb2\xbe\x05\x19\xdd\xa6\xd1\x50\xaa\x0e\xa2\xf5\x72\x55\xc0\x96\x80\x48\x01\xfa\x37\x9f\xc4\xd4\x0b\x99\xb5\x3b\x5c\x90\x66\xf7\x3a\x27\x1c\xe8\x82\x6c\xf1\x5a\x27\x54\x0a\x8a\x1a\x37\xe8\x7f\x1b\x5d\xa1\xd3\xf8\x36\x2f\x9c\x18\xe2\x17\xb8\x46\x21\x31\xb1\xed\x9f\x76\x8d\x31\x7a\x9a\x58\xbf\x8b\x21\x75\x21\x5a\xf2\x48\xbe\xf2\x7c\xb7\x4b\xcc\xa2\x56\xa9\x00\x32\xde\xc8\x97\xbc\xd1\x42\xb9\xda\x76\xcb\x79\x18\xde\x8e\xf7\x3a\x09\x13\xee\xe8\xfa\x87\x84\xb0\x24\x6b\x04\xdd\xff\x69\x51\x3e\x07\x24\xf6\x32\xa5\x0b\xcd\x46\x1d\x98\x72\x10\xe8\xf1\x35\x6a\x55\xc3\xdb\xf1\x49\xdc\xff\x81\xe2\x89\x3e\xbd\x36\x7a\xbe\x0a\x63\x40\x0e\x74\x47\xae\xfc\x2e\xd0\x96\x61\xc5\xb8\x04\x18\xde\x8e\x4b\x52\x0e\x51\xc4\x4c\xd7\x5b\xd0\xff\xd9\x92\xe3\x6e\xc7\x25\x07\x26\x1d\x40\x6e\xe9\xe4\x9c\x69\x55\xfb\x38\xf5\xec\x2c\xa1\x30\x63\xa8\xae\x2b\xa5\xd2\x81\xec\xf3\x37\x14\xa6\x76\x39\xaf\x54\x7e\xed\x76\x7e\xb3\xa7\xd0\x3b\x82\x4f\x85\xf6\x43\xd7\x82\xdd\x5c\x09\xd8\x94\x64\x67\x54\x7e\xc9\xc9\xfd\x0e\x96\x31\xbc\x9c\x71\xb3\x4e\x28\xda\x77\xb5\xd3\xd9\x71\xbe\x5f\x46\x77\x4f\xe7\x97\x57\xab\x5e\x82\xc8\x0a\xc3\xbd\x62\xad\x1c\x02\xc9\x04\x1d\x06\x7f\x04\x28\xc2\xd2\xc4\x8d\x59\xee\x57\xb0\x39\x17\x0e\x65\x44\xa5\xae\xb7\x03\xb1\xd6\xa8\x52\xa6\x0c\x99\xe8\xb1\xcc\x98\xf2\x82\x11\x7d\xfc\x76\xb0\x9e\x6a\xf4\x44\x5d\x60\x43\x62\x2c\xb4\x7d\xef\xa6\x82\xa8\xd9\x01\x2b\xeb\x7f\xda\x9b\x93\xb4\x7f\x4c\xdd\x58\xec\x43\x23\x03\x72\xf3\xb6\x30\x83\xee\x92\xa2\x93\xb2\xc5\x67\xa6\x68\xc9\x43\xf9\x0f\xd1\xb2\x86\x42\xcf\xd2\x9f\x45\x52\x4e\x66\xac\x89\x1b\x44\x9a\xb2\x8d\x45\x63\xbb\x48\x5c\x77\xe1\xf5\x24\xbe\xca\xf5\xdb\x46\xd7\xfb\xdd\xa8\x8d\xf9\xb2\xc2\x50\x9f\x42\xa3\xa2\xe4\xbf\xfc\x15\x40\xb4\xb6\x59\x34\xeb\xee\xab\x1e\x7c\x46\x15\x08\xf6\x11\x27\xee\x3c\x80\x4d\xf0\x67\xcb\xc5\x8e\x28\xcd\x16\xc6\xb4\xa8\xc9\xc8\xec\x49\xa5\x1a\x7c\xa0\xb6\x39\x20\x85\x7c\x4d\xf1\x0d\x44\xbc\xf7\x76\xd2\xeb\xe7\x71\x37\x6b\x37\xc0\xbf\x0f\x98\x07\x13\xda\x3d\xce\x29\x43\x47\xc7\xfb\x68\xfc\x04\x57\xbd\x9b\x03\xb8\x2e\xb6\x5f\x1f\xde\x98\xef\xb4\xdb\xf2\x6c\x25\x3f\x44\x57\x7e\x95\xab\x1a\xb0\xad\x27\xb0\x0a\xd2\xed\x3a\xc2\xea\x6c\x4e\x6a\x89\xac\xb3\x5f\x3c\xef\x5b\xae\x14\x11\x3f\xef\x5e\x1e\x9c\x5c\x72\x69\x4f\xc2\x10\x66\x54\xbd\x51\x89\xf0\xf3\x73\xae\xbc\xd0\x20\x7b\x44\x49\x20\xb6\x8d\xbe\xca\x38\xcf\x30\xa0\xa8\xc4\xff\x3e\x55\x4b\x3c\xd5\x70\x42\x59\xbe\x52\xbf\xd4\x7b\x74\xaf\xda\x45\x36\x38\x79\x67\x99\x93\xf9\x3b\xbe\xd6\x93\x8a\x0b\xb2\x48\x2a\x75\xb0\x8a\x7e\xce\x78\x4d\x47\x64\xa1\x96\xb1\xa0\x37\x28\x60\xf2\x83\x55\xb0\xb0\xf4\xe5\x0f\x96\xae\x7d\xb2\xe5\xf5\x0f\x9d\x43\xb1\x3e\xfa\x54\xda\xe3\x7f\x2c\xe8\xc2\xa7\x4f\xb1\x4d\xd5\x22\xa8\xe3\x22\x5b\xa8\x25\x7c\x86\x6e\x59\xb7\xfe\x31\x88\x5b\x8d\xd2\x83\x8a\x40\x84\x63\x71\xfc\x5b\xab\xfa\x5b\x11\x87\xee\x3e\x67\xe0\x63\x7d\x53\xf1\x64\xf4\xae\x7b\x87\xb0\x7e\x3d\x8f\x6b\xc3\x1a\xc8\x85\x95\x1b\xa1\x8f\xd1\x76\xd6\x00\x6d\x87\xea\xdd\xd7\x3f\xff\xd6\x5b\x9b\x77\xfb\x22\xbf\xf3\x06\x9f\xd8\x35\xd7\x36\xdb\x19\x7f\xa7\x5f\x0a\x37\xf6\xdb\x5d\xf3\xbe\x8b\x98\x0f\xe3\x51\x81\xb8\x04\x86\x57\x7b\x81\xb2\x0d\x8e\x9d\x60\xd4\x3f\x16\x34\xc0\xf1\x9e\xfb\xe1\x0f\x83\x91\x3d\xc1\xd6\x41\x41\xca\xd7\xba\x0d\x28\xc4\x5a\x76\xe2\x40\xb6\xdc\x8f\xa7\x10\x88\x00\x35\x89\x47\x99\x2f\x79\x04\xf6\x7c\x17\x3d\x64\x71\x43\x42\x99\x42\x31\x27\x36\x82\xf4\xd1\xa6\x73\x9a\xe5\x59\x5f\xf0\x35\x75\xd0\x81\xba\x43\x94\xca\x8d\xef\x0d\x10\xe3\xfb\x24\xc7\x66\x1a\x15\x07\x7b\x89\xf6\x4a\x53\x67\x15\xbd\x9c\x71\xe9\x83\x75\xc9\x38\xdd\xa5\xa3\x54\x86\x58\x63\xa5\x4d\x1d\x45\xe0\xfb\x5c\x28\x39\x4e\xe6\xb5\xe3\x47\xd6\x9c\x9d\x29\xe2\xbe\xa6\x8e\x2c\xee\x38\x77\x0b\xf7\x08\xc7\xe6\x8f\x00\x02\xef\xd4\xa1\x92\xcc\x5c\x3c\x65\xb8\x51\xa7\x2e\x65\x98\x2c\x9b\xf3\x4a\x1e\x07\xcb\xaa\x79\x06\xff\xeb\xaf\x54\xa4\x34\xb7\xf6\xf9\xbb\x79\x7a\xf5\xd9\xbb\x79\x6e\xe5\xb9\xbb\x79\x6a\xdd\x33\x77\xf3\xec\xea\xf3\x76\xf3\xdc\x86\x67\xed\x66\x81\xca\xdf\x1d\x24\x01\xfe\xad\xf5\xff\x00\x00\x00\xff\xff\x7e\xa1\x12\x4f\x9e\x21\x00\x00")

func TruffleContractsKnsPublicresolverSolBytes() ([]byte, error) {
	return bindataRead(
		_TruffleContractsKnsPublicresolverSol,
		"../../truffle/contracts/kns/PublicResolver.sol",
	)
}

func TruffleContractsKnsPublicresolverSol() (*asset, error) {
	bytes, err := TruffleContractsKnsPublicresolverSolBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../truffle/contracts/kns/PublicResolver.sol", size: 8606, mode: os.FileMode(420), modTime: time.Unix(1533199628, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9b, 0x6c, 0xe6, 0x81, 0x7e, 0x36, 0xdb, 0xbf, 0xd3, 0xec, 0x38, 0x62, 0x1a, 0x18, 0x3e, 0x82, 0xb4, 0x56, 0x55, 0xb, 0x49, 0xdd, 0x8b, 0x2e, 0xbc, 0xf5, 0x2f, 0xa4, 0xad, 0xec, 0x3a, 0xa9}}
	return a, nil
}

var _TruffleContractsKnsFifsregistrarSol = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x93\xdf\x4f\xdb\x40\x0c\xc7\xdf\xf3\x57\x58\x3c\x95\xaa\x4b\x10\x63\x7b\xa9\x90\x40\x93\x90\x10\x12\x43\xeb\xde\x91\x93\xb8\x8d\xd5\xe4\xae\xb3\x9d\x41\x19\xfc\xef\xd3\x5d\x7e\xb4\x74\xb0\xa7\x49\xcb\x4b\xaf\xbe\xf3\xd7\xf6\xc7\xf6\x46\x70\xd5\x20\xa8\xaf\xb9\x64\xdb\xc2\x49\x7a\x96\x9e\x9e\xcd\x93\x84\x9b\x8d\x17\x83\xa3\x34\xbb\xb9\x5d\xa4\xea\xeb\xa3\xf9\x68\x7b\xf2\xfa\xa1\xe6\x3c\x2b\xbc\x33\xc1\xc2\x34\x6b\x78\x25\x68\xec\x9d\x66\xd7\x8e\x8d\xb1\xe6\x27\xcc\x6b\xea\x1d\x93\x6c\x3a\x4d\x60\x0a\x97\x20\xb4\x62\x35\x41\x01\xab\xd0\x00\xeb\xda\x17\x68\xa4\xa0\x6d\x5e\xfa\x06\xd9\x29\x98\x07\xab\x08\x96\x2c\x6a\xb0\x21\x51\xef\x82\xad\xa8\x91\x9b\x70\xd3\xa4\x09\x4c\xb3\x64\x88\x0e\x57\xd7\x57\x8b\x6f\xa3\x2e\x2b\xbc\x4a\xe1\x57\x02\x00\x70\x73\xbb\x80\xb5\xd3\x79\xfc\x93\x6f\x8d\xf4\xe3\x29\x88\xf7\x76\xeb\x4b\x9a\x27\xd1\xdc\xf8\x92\x97\x4c\x02\xde\xd5\xdb\x7b\xff\xe0\x48\x26\xc3\x53\x6d\x73\xe7\x4b\x3a\x86\x4e\x2e\x7c\x58\x96\x42\xaa\x50\xb4\x22\xe4\xec\x6b\x78\x0f\xe7\x21\x4a\xda\xf9\xae\xa9\x28\x70\x7d\xfa\xe9\xf3\x64\x08\x34\x1b\x75\x8e\xe7\xa3\x8e\xd0\x8f\x96\x85\x26\xaf\x75\xce\xe1\x04\x9e\x9f\xe1\xd0\xd8\xe8\x2a\x55\x72\x25\xc9\x9e\xc2\x7d\x77\x7c\xe9\xca\x88\xac\xc3\x37\x85\x2f\xde\xa9\x49\x5b\x98\x97\x74\xb0\x5d\x6c\x50\xb0\x09\x69\x5e\x96\xa5\xc0\xf7\x8a\xc6\x4a\xfc\x32\x82\x0f\xac\xfa\x3e\x6d\x0f\xdd\x42\xf2\xd1\x27\x1e\x62\x0f\xad\x62\xdd\xeb\x2b\x96\x0d\x3b\x56\x23\xd1\xc1\x39\x8b\xbf\xc5\x2e\x99\x49\xdf\x8e\x90\xc1\x6c\x6c\x47\x07\x78\xd3\xe6\x35\x17\x7b\x9c\xd7\x4e\x3b\xac\xe1\xf5\x1e\xb6\x9e\x29\x9c\x47\xc7\xf7\x10\x5c\x94\xf4\x13\x78\x18\x08\x82\x65\xeb\x8a\x30\xa8\xb0\xf4\x02\x77\xe2\x1f\xb7\x70\x87\x66\x24\xee\xff\x13\x1a\x73\xdb\xe5\xfb\x37\x52\xac\xe3\xa0\x93\xfc\x6b\x6e\xdd\x42\x91\x00\x82\xc3\x86\x66\xe0\x05\x8a\x0a\xdd\x8a\x22\x81\x38\xe1\x01\x07\x3a\xa0\x47\x56\x63\xb7\x1a\x4b\x0c\x35\x1c\x62\xe9\x07\x3f\x92\xa9\x50\xab\x01\x65\x8d\x39\xd5\x61\xbd\xa5\x0f\x78\xe8\xd8\x45\x7a\xa3\x09\x8e\x1e\xba\xcb\x77\x20\x0e\x82\x87\x3b\x3c\xdb\x09\x05\xef\x71\xe2\xf6\xb6\xfe\x8d\x6d\x0f\x6b\xad\x64\x8b\xee\x26\xee\xe3\x9f\x6b\x3d\xeb\x25\x07\xa8\x2f\xc9\xef\x00\x00\x00\xff\xff\xc4\x94\xcf\x58\x60\x05\x00\x00")

func TruffleContractsKnsFifsregistrarSolBytes() ([]byte, error) {
	return bindataRead(
		_TruffleContractsKnsFifsregistrarSol,
		"../../truffle/contracts/kns/FIFSRegistrar.sol",
	)
}

func TruffleContractsKnsFifsregistrarSol() (*asset, error) {
	bytes, err := TruffleContractsKnsFifsregistrarSolBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../truffle/contracts/kns/FIFSRegistrar.sol", size: 1376, mode: os.FileMode(420), modTime: time.Unix(1538736199, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x91, 0x50, 0x16, 0x2b, 0x3a, 0x81, 0xa0, 0x51, 0x39, 0x74, 0x81, 0xa0, 0xeb, 0xe0, 0x48, 0xe7, 0x74, 0x75, 0xf4, 0x33, 0xf0, 0x61, 0xa9, 0xe0, 0x40, 0xab, 0xf7, 0x53, 0xd6, 0x4, 0xa9, 0x47}}
	return a, nil
}

var _TruffleContractsKnsKnsregistrySol = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xdb\x46\x10\xbd\xf3\x57\x0c\x72\x92\x04\x97\x34\x5c\x37\x17\x41\x45\x81\x9e\x8a\xa4\x8e\x61\xeb\x56\x14\xc6\x8a\x1c\x49\x8b\x90\xbb\xec\xec\xd0\x0a\x53\xe4\xbf\x07\xfb\x45\x89\x94\x68\x4b\x89\x79\x21\xb8\x3b\xf3\x66\xf6\xcd\x9b\xe1\xd6\x24\x36\x95\x00\xa3\x4b\x59\x48\x6e\xe1\x3a\xbd\x4d\x6f\x6e\xe7\x49\x22\xab\x5a\x13\xc3\xbb\x34\xfb\x70\xf7\x98\x1a\x5d\xbe\x9b\x77\x6b\x5f\xb5\xf9\xa5\x94\xab\x2c\xd7\x8a\x49\xe4\x6c\xb2\x4a\x6e\x48\xb0\xd4\xca\x64\x7f\x29\xc9\x52\x94\xf2\xab\x58\x95\x18\x1c\x93\x6c\x36\x4b\x60\x06\xcb\x2d\xc2\x87\xbb\x47\x20\xdc\x48\xc3\xd4\x42\x44\x48\x13\x98\x65\x49\xfc\xb2\x36\x0f\xd1\x44\x1a\xfb\x79\x05\x3d\x5c\xf8\x3f\x01\x00\x30\x4c\x4d\xce\xf0\x80\xb9\xa6\x22\xac\xd9\x47\x14\x05\xa1\x31\xa0\x77\x0a\x69\x7e\xb4\x4c\x68\x74\xf9\x7c\xb8\xd3\x48\xc5\xef\x6f\x81\xb9\xf4\x6b\xdf\x12\xf7\xaa\x44\x5d\x4b\xb5\x81\xc9\xaa\x65\x34\xbf\xde\xc0\xe2\xf7\x10\x6c\x0a\xe4\xde\x66\xee\x2d\xb3\x0c\xee\x91\x2a\xc9\x06\x2a\x5d\xc8\xb5\xcc\x3d\x1d\xa0\x55\xd9\xc2\xaa\x05\xde\xa2\x4f\x07\xf4\xda\x7d\x98\x1a\x73\xb9\x96\x58\x80\xd2\x05\xa6\x3e\x9e\x73\xb5\x36\xaa\x6c\x9f\x9c\x79\x17\xda\x5a\x4d\x0f\xce\x48\xf8\x5f\x23\x09\x27\x21\x8f\x7f\xec\xfe\xbf\xa9\x0f\xb1\x58\x40\x65\x36\xa9\x41\x55\x20\x4d\xf7\xc7\x7c\xea\x9d\xce\x15\xc5\x3e\x33\xf8\xa3\xc0\x67\xf8\x53\x2b\x4f\xa8\x01\x01\x0a\x77\x87\xa5\x12\x94\x06\xdb\xcc\xbd\xf3\x68\xab\x69\x32\x85\xba\x59\x95\x32\xef\x25\xe7\x93\xba\xfe\x72\xdd\xe5\x74\x90\x52\x2f\x8d\xa3\x3c\x64\xac\x34\xc2\xba\x51\xb9\xe5\x11\xd6\x9a\xe0\x9e\xf4\x97\x16\xee\x05\x33\x92\x4a\x3b\x97\x5a\x90\xa8\xc0\xb3\xb5\xaf\xbc\x27\x99\xb4\x66\x4f\x7b\x2f\xfb\x0e\x76\x1f\x6a\x12\x3d\x3d\xd0\x14\xa4\xe9\x14\x87\x74\xe6\x09\x9f\x0e\x04\x37\x42\xf2\x92\x84\x32\x6b\xa4\x20\x4e\xb3\x95\xb5\x4d\x56\xb8\xfa\x02\xeb\x40\x7d\xc8\x26\x85\xbf\x45\x1b\x34\x84\x90\x8b\xb2\xc4\x22\xaa\x29\x6f\x88\x50\x71\x5f\x55\x7b\x2d\xed\xa9\x71\xc8\xcb\xb0\x69\x43\x70\xc8\xa1\x97\xc2\xd0\xcb\xc3\x5a\xb7\x01\xa7\x36\x3d\xb7\x99\x9e\xe6\xd4\x20\x7f\x3a\x52\xee\x55\xbf\x27\x3b\xc9\x1c\x08\x7d\x28\x70\xac\x24\x77\x74\x4d\x3c\x88\x77\x9e\x1f\x55\xa1\x27\x7e\xf8\x89\x2a\x98\x66\xe5\x58\xfa\x8c\x79\x2e\x3e\xdf\xfc\xf6\x3e\x04\x2e\xc5\x0a\xcb\xe9\x45\xf5\xe9\xd5\xa5\x16\xae\x56\x2f\x96\xe7\x05\x1b\x17\xde\x19\x6d\x85\xd9\x46\x50\xbf\xea\x07\x49\x6b\xe7\x94\x9b\x2b\xfe\x04\x6f\x59\xce\x47\x0f\x79\xaa\xaa\xf1\xcb\xa5\xf2\x03\x45\x8e\xfe\x91\xf7\xc5\x08\xf3\xf3\xbe\x2c\xee\x70\xf7\xa9\xc3\xbb\x8a\xd1\xc7\xd4\x11\xc0\x2f\x11\xc8\x23\xb2\xf1\x13\x24\xfc\x2b\xba\xa3\xd9\x49\x34\x36\xbf\x5f\xe8\xb9\xa6\x2e\x04\x1f\x99\x75\xe8\x27\x0a\x13\xf7\xc6\xeb\xf2\x10\x2c\x46\x3a\x2d\x02\x9c\xdd\x6c\x77\xb8\xeb\x20\x3d\x54\x07\x31\xd6\x72\xdd\x01\x16\x83\xbf\xea\x6b\xbc\x2e\x97\x1f\xdf\x96\x4a\x66\xdf\x20\x16\x58\x5a\x7a\x72\xad\x0a\x33\x4e\xde\x72\xf9\x71\xc0\xdb\xfe\x12\x70\x09\x63\x16\xc7\xfb\x5b\xc7\x31\x9e\x6c\x76\x8b\xa3\xfb\xc5\x90\x9d\x07\xe4\x86\x94\x27\x28\x56\x91\xb7\xc2\xcd\x78\x73\x09\x55\x63\x66\xe4\x02\x0c\x95\xf6\x52\xfb\x9f\xba\x84\x04\x72\x9e\x25\xee\x80\x42\xca\xf1\xff\xd9\xbf\xa2\xb8\x68\x27\x86\xf4\xc5\x2c\x0c\x7a\xe2\x52\xe9\x5c\xc6\xc7\x2b\x9d\x47\xa7\xda\xee\x27\x59\x39\xab\x79\x0e\x89\xb1\x32\xef\xee\x0d\x57\x20\x54\x01\x42\xb5\x11\x15\x84\x31\x3a\x97\x82\xb1\x80\x9d\xe4\x2d\x48\xfe\x51\x6e\xac\x72\x4f\x5c\x2e\x06\x9c\x30\x97\xe7\xd0\xe1\x5b\xec\x55\x36\x0e\xfb\xe4\x5b\xf2\x3d\x00\x00\xff\xff\x16\x63\x4c\x4e\xa4\x0c\x00\x00")

func TruffleContractsKnsKnsregistrySolBytes() ([]byte, error) {
	return bindataRead(
		_TruffleContractsKnsKnsregistrySol,
		"../../truffle/contracts/kns/KNSRegistry.sol",
	)
}

func TruffleContractsKnsKnsregistrySol() (*asset, error) {
	bytes, err := TruffleContractsKnsKnsregistrySolBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../truffle/contracts/kns/KNSRegistry.sol", size: 3236, mode: os.FileMode(420), modTime: time.Unix(1533199628, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbb, 0xee, 0xf7, 0x65, 0x91, 0xdb, 0xae, 0x88, 0xda, 0xa5, 0xb4, 0x7, 0xa7, 0xec, 0x36, 0x98, 0xf5, 0x6e, 0xe3, 0x27, 0x53, 0x11, 0x1c, 0x3c, 0xf4, 0x3c, 0x33, 0x76, 0xea, 0xe8, 0x15, 0x9e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../truffle/contracts/kns/PublicResolver.sol": TruffleContractsKnsPublicresolverSol,

	"../../truffle/contracts/kns/FIFSRegistrar.sol": TruffleContractsKnsFifsregistrarSol,

	"../../truffle/contracts/kns/KNSRegistry.sol": TruffleContractsKnsKnsregistrySol,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"truffle": &bintree{nil, map[string]*bintree{
				"contracts": &bintree{nil, map[string]*bintree{
					"kns": &bintree{nil, map[string]*bintree{
						"FIFSRegistrar.sol":  &bintree{TruffleContractsKnsFifsregistrarSol, map[string]*bintree{}},
						"KNSRegistry.sol":    &bintree{TruffleContractsKnsKnsregistrySol, map[string]*bintree{}},
						"PublicResolver.sol": &bintree{TruffleContractsKnsPublicresolverSol, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
