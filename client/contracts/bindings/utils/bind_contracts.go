// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../truffle/contracts/utils/NameHash.sol (1.057kB)
// ../../truffle/contracts/utils/Strings.sol (24.684kB)

package utils

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TruffleContractsUtilsNamehashSol = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xcd\x8e\xda\x30\x14\x85\xf7\x7e\x8a\x53\x56\x09\xd3\x09\xcc\xcf\x8e\x22\x75\xd9\x55\x37\x74\x37\x42\x23\x03\x26\xbe\x92\x63\x47\xf6\x0d\x14\x55\xbc\x7b\x65\x27\x0e\x33\xc0\x6e\xee\x06\xa2\xdc\xf3\x9d\xcf\x98\xd6\xcb\xba\x91\x08\xce\xd0\x8e\xf8\x84\x79\xf5\x5a\x3d\xbf\x2e\x84\xa0\xa6\x75\x9e\x31\xa9\x66\x2b\xf6\x64\xeb\x50\x05\x67\x26\x0b\x21\xc4\x6c\x3a\x15\x98\xe2\xb7\x6c\x94\x96\x41\x63\x95\xb3\xd4\xb4\x46\x35\xca\xb2\x64\x72\xb6\x12\x98\xce\x84\xa1\x8d\x97\xfe\x94\xb6\x7f\xc9\xa0\x05\xfe\x09\x00\xe8\x02\xd9\x1a\xa1\x47\x63\xef\x3c\xa6\x91\x1d\x5f\x25\x7e\x9c\xd8\xc1\x74\x50\xb0\xb9\x4a\x9a\xda\x79\x62\xdd\x5c\x75\x81\xec\xa8\x51\xe5\xf0\xcf\x56\x7a\xd9\x00\xef\xd6\xed\x14\xfe\x68\x35\xd4\xc1\x1d\x94\xc7\x51\xd3\x56\x83\xf5\x5d\xfa\x91\x8c\xc1\x46\x41\xb6\xad\x21\xb5\xbb\x20\xbd\xe2\xce\x5b\xbc\x8f\x99\x88\xf5\x2a\x74\x86\xe1\xf6\xf7\x50\x03\x02\x92\x7b\x91\xcc\x9a\xa5\xcf\x7d\x67\xb7\xe9\x00\x39\x59\x0c\x8e\x69\xb7\xc4\xd6\xd9\xc0\xd2\x32\xfa\xe2\x80\x62\x73\x62\x15\x5e\x9e\x2f\x0a\x65\x02\xf5\xbf\x6a\x9c\x83\xf4\x48\x27\x5e\x0e\x85\xec\x56\x86\xb6\xaa\x28\x17\xe3\x4e\x86\x8c\xbe\x4b\xcc\xff\xce\xbf\x38\x17\x3c\xed\x8b\x6f\xa9\x5a\x35\x2d\x9f\x8a\xb2\x1c\xdf\x5c\x34\xb3\xea\x4e\x19\x6a\xb0\xc4\xa4\x9a\xdc\x33\xcd\x6b\xad\xf4\x1c\xb0\x84\x55\xc7\xe1\x1a\xdf\xd6\x45\xea\xd8\xba\xce\x72\x91\x30\x25\x1e\xf0\x74\x15\xde\x3b\x5f\x74\x64\x19\x14\x0f\xb9\x00\xe1\x47\x0f\xab\x8c\xb2\x35\xeb\x05\xe8\xe1\xa1\xfc\x14\xf9\x2c\x19\x27\x05\xde\x68\x1d\x05\x62\x67\x68\x0d\xe5\xce\x68\x9d\x84\xae\xb5\xcf\xe2\x46\xe4\x2b\x0e\x1f\xee\x2a\x68\xf9\x52\xe4\xe7\xef\xfd\x63\xaf\xf8\x91\x8a\x47\x10\x1e\xf1\xb4\x2e\x6f\xc4\x6e\xbf\x0d\x7f\xec\x0c\xed\x03\x67\x21\xce\xff\x03\x00\x00\xff\xff\x7b\x8c\x07\xee\x21\x04\x00\x00")

func TruffleContractsUtilsNamehashSolBytes() ([]byte, error) {
	return bindataRead(
		_TruffleContractsUtilsNamehashSol,
		"../../truffle/contracts/utils/NameHash.sol",
	)
}

func TruffleContractsUtilsNamehashSol() (*asset, error) {
	bytes, err := TruffleContractsUtilsNamehashSolBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../truffle/contracts/utils/NameHash.sol", size: 1057, mode: os.FileMode(420), modTime: time.Unix(1535536576, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x42, 0xa9, 0xcf, 0xa9, 0x7d, 0x25, 0xc2, 0x27, 0x95, 0x21, 0x8e, 0x5d, 0x66, 0x8f, 0x4f, 0xfe, 0x48, 0xa3, 0xbc, 0x60, 0x3d, 0x7f, 0xd0, 0xae, 0xd8, 0x6e, 0x71, 0xbd, 0x49, 0x94, 0xbe, 0x6f}}
	return a, nil
}

var _TruffleContractsUtilsStringsSol = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x73\x1b\xb9\x91\x7f\xf7\xa7\xe8\xdd\x87\x98\xb4\x46\xa2\x2c\x79\x7d\x3e\xcb\xdc\x8a\xd7\x15\xd5\x6d\x6a\x77\x73\x15\xfb\xea\x1e\x52\xa9\x15\x38\x03\x8a\x88\x86\xc0\x2c\x80\x91\xc4\xdc\xf9\x3e\xfb\x55\x37\x30\x33\xc0\xfc\xe3\x50\x72\x1c\xef\x56\xf8\x60\x8b\x43\xa0\xd1\x68\x74\xff\xfa\x0f\x80\x59\x3c\x7b\x02\xcf\xe0\xf7\x56\xd8\x9c\xc3\x7b\xab\x85\xbc\x86\xdf\x81\xc9\x45\xca\xa1\xb4\x22\x17\x76\x07\xb9\x58\x69\xa6\x77\xb0\x56\x1a\xde\xab\x5c\x64\xf8\x30\x55\xd2\x6a\x96\x5a\x73\x42\x04\x58\x69\x37\x4a\xc3\x4f\x22\xbd\x81\x3f\xaa\x8d\x34\x4a\xc2\x1b\xa6\x59\xba\x91\x22\xfb\xbd\x54\x36\x53\xf6\x44\x72\xfb\xed\x13\x70\x23\x66\xfc\x16\x2e\x4b\x99\x5a\xa1\x24\xa3\x61\x84\x04\xbb\x11\xa6\x1e\x0e\xff\x64\xfa\x9a\xe7\x3b\x10\xdb\x22\xe7\x5b\x2e\x2d\xcf\xa0\x34\xc8\x23\x93\x48\x85\x3e\x6c\x65\x88\x13\xa1\x24\xa4\x2c\xcf\x79\x06\x0c\x9e\xd2\x14\x9e\x9e\xc0\x5b\x3f\x19\xcd\x0b\xcd\x0d\x97\xd6\x00\x83\x82\x69\x0b\x6a\x0d\x0c\x8c\x9b\xf2\x71\x43\x4d\xee\xec\x06\x1f\xad\xb5\xda\x82\xdd\x70\xe0\xd2\x0a\xcd\xab\x96\x56\x61\x2f\x21\xaf\x73\x0e\xe9\x06\x67\x68\xb9\x4e\x40\x69\xe0\xb7\x5c\x82\x54\x35\xa5\xfa\x57\x03\xcc\x02\xcb\x73\x98\x31\x38\x3d\xce\xb9\xbc\xb6\x1b\xc7\xd5\xfc\x04\xde\x0b\x99\x72\x24\x49\x5c\x2a\x99\xef\x60\xc3\x0c\x0e\x63\x0a\x9e\x8a\xf5\x2e\xe0\x0c\xd4\x7a\x6d\xb8\x05\x26\x71\x8a\x8e\x50\x02\xa9\x2a\x76\x4e\x24\x19\x6c\x99\x14\x45\x99\x33\x8b\x0f\x88\xa4\x41\x39\x32\xc8\x95\x85\x9c\x1b\x53\x53\xe3\xf7\x05\x97\x46\xdc\x72\xb0\x1b\x26\x87\x89\xa0\x04\xdc\xd4\x0d\xfe\xbd\x03\xcd\xd7\x5c\x73\x99\xf2\x13\xbf\x94\xf4\xf9\xa0\x60\x5d\x6a\xbb\xe1\x1a\x34\xcf\xca\x94\xc3\x35\x33\x90\x2a\x63\x4d\x02\x5b\x65\x2c\xac\xfd\x62\x1b\x50\xd2\xcf\xd6\x6e\x98\x05\xc9\x79\x86\xd3\xd5\xdc\x96\x3a\x58\x55\xdf\x66\xab\x32\xb1\xde\x11\x1b\x4a\x8b\x6b\x21\x59\x0e\x4a\x72\x10\xd2\x58\xce\x32\x5a\xc5\x3c\x57\xa9\xe3\x96\x81\xe4\x77\xf8\xfb\x05\x6a\x6b\x4d\x0c\x1b\x33\x99\xf2\x04\xae\xcc\x89\x29\x72\x61\x67\x5f\x9f\x7c\x3d\xbf\x82\x3b\x91\xe7\x7e\x64\x1a\xc2\xf2\x7b\x0b\x65\x81\xfc\xe0\xd7\xb5\xd0\xc6\xc2\xd3\x93\xa7\x49\x4d\xca\xf1\x43\xe2\xc5\x56\xb4\x60\x68\x0b\x4c\x38\x0a\x9a\x6f\x99\x90\x19\xd7\xc8\x59\x23\x3c\x60\x6b\xcb\x35\x3d\x78\x7a\xf2\xf4\xa4\x26\xf7\xbd\x04\x23\x6c\xc9\x9c\x64\xee\x36\x5c\x73\xd8\xa9\x12\x32\x05\x52\x59\xb8\x63\xd2\xe2\x30\x7d\x52\x20\xf9\x24\xd8\xba\x51\x39\x26\x61\xcb\x6e\x50\x9f\x70\x41\x3d\xff\x77\xc2\x6e\xe0\xea\x04\x9f\xcc\xe6\x57\x09\xd9\x31\xbf\x67\x68\x53\xaf\xeb\xae\x57\xc6\x37\x08\xe5\x73\x02\x1f\xf4\xce\xa9\xdb\xad\x12\x95\xed\x91\x95\x8a\x4c\xa8\x2d\xda\x6c\xae\x54\x61\x2e\xd0\x24\x52\x5e\x53\xab\x61\x02\x75\x59\x2a\xd8\xf2\xad\xd2\x3b\xd4\x2c\x76\x4d\x86\x9c\x80\xb0\x95\xf4\x4d\x99\x5b\xa4\x14\xac\xe3\x96\xc9\x46\xf1\xcd\x46\x69\x7b\x9c\x8b\x5b\x9e\x55\x3a\x4d\x9a\xc3\x34\x87\x9c\xa1\x58\x33\x61\x52\xa6\x33\x9e\x45\x3a\x79\x59\x6b\x1c\x35\xaf\x96\xf9\x4e\x55\x54\x52\xb5\xe5\x04\x3b\x77\x0a\x6e\xb9\x36\xd8\xf6\x35\xea\x90\x92\xc7\x0d\x33\x35\x3d\xdf\xc4\x51\xb3\xec\x86\xf8\xe0\x60\x78\xaa\xa4\xe7\x0c\x98\x41\x3b\x65\xfa\xba\x74\xb3\x6c\xd4\x45\xe0\x1c\x6b\x5a\x45\xce\x70\xf1\x48\xb4\xd1\xcc\xa3\x41\xfc\x73\x6e\xa8\xa1\x9b\x40\x38\x68\x23\x22\x1c\xfc\x02\x0c\xe7\x70\x25\xf9\xbd\xfd\x73\x29\xf9\x55\xb8\xd0\x63\x82\xd9\x30\x44\x01\xe5\x54\xc6\xab\x6b\xc6\x2c\x8b\xac\xa3\xc2\x00\xcd\xc8\xc8\x11\x34\xe2\xd1\xcd\x05\x32\x66\x38\x29\xe1\x0a\xff\x33\x16\x56\x2c\xbd\x21\x2c\x73\x02\x47\x86\x2a\x98\x28\xb4\x4a\xb9\x21\x85\x12\xeb\x9a\x94\xe6\xbf\x94\x42\xb7\x17\x52\x69\xb4\xb1\x5b\x2e\x05\x27\x2b\x36\xb8\x70\x0d\xa0\xa0\x22\x14\x5a\xdd\x8a\x8c\x67\x4e\xdb\x71\x05\x6b\xd1\x37\x0b\xc8\xb4\x60\xe8\x01\x68\xda\xa9\xe6\xcc\x72\x0f\x19\x7e\xf5\x6a\x29\xc3\x4a\xd9\x0d\x81\x48\x03\x1e\xa1\xad\x90\x91\xfc\xc4\xef\x66\x4f\x4f\x9e\xce\xaf\x20\xe7\xec\x96\x1b\x30\x50\x4a\x1a\x56\xf0\x2c\x89\xd7\x0c\x55\x8c\xe5\x25\x6f\x10\x38\x55\x5a\x73\x53\x28\x99\x79\xbf\x82\xeb\x9a\xf3\xb5\xc3\x77\x2d\xae\x37\x96\x1c\x95\x89\x91\x04\x25\xb3\x78\x52\x39\xc9\x6a\x59\xfe\xe7\x09\x2d\x84\xd5\x65\x6a\xfd\x64\xdc\x23\xfc\x94\x42\x5a\xf8\x39\xe7\xf2\xa2\xf5\xa8\xb0\xda\x3d\xfa\xf8\x84\xfe\xab\x44\x8a\xf6\x9a\x16\xbb\x19\xb5\xca\xb8\xb1\x89\xeb\x60\x74\xea\xff\xca\xb9\x9c\x43\xa1\xc5\x2d\x8a\xb0\x19\x69\xb1\x80\x77\xa8\x45\x77\x4a\x67\x95\xa7\x4b\x37\xa5\xbc\x41\x6c\x13\x39\x87\x42\x19\x23\x56\x39\xaf\x7b\xac\x95\x9e\x5d\x20\x39\xf8\x76\x09\xe7\x67\xee\xcf\x63\xfc\x73\x1e\xd0\x25\x8f\x60\x0c\xdf\xae\xf2\x5d\xeb\x31\x81\xb2\xb1\x4a\xf3\x99\xe3\x74\x9b\x2b\x96\xcd\x8c\x4e\xe7\xf3\xa8\xe1\xc7\xe8\x1b\xb6\x85\x23\x1a\x32\x7a\x6e\x74\xda\x7e\xec\x85\x13\xce\xcf\xa1\x3c\xae\xdb\x6a\x67\x71\x4d\x43\xb1\x6e\x99\xb9\x81\x25\x9c\x7d\xf3\x12\x9e\x3d\x83\xd9\xf9\x19\x1c\x3b\x79\x1d\xc3\xf3\x86\xea\xc0\x74\x72\x4e\x62\xa6\x08\xe5\xf5\x12\x55\x61\xd6\x4c\x28\x41\xa7\x30\x43\xfa\xad\xb9\x61\x2f\x9c\x51\xb7\x1b\x3e\x9d\x27\xc4\x53\xdc\x25\x92\x99\xd2\xb3\xaa\x7b\x52\x0d\x1f\x0c\xf1\x31\x54\x12\x0c\x19\xf1\xe3\x83\xb8\x3f\x7b\x0d\xaf\x1c\xb6\x77\x86\x55\xec\x10\x45\x4f\x27\x75\xcf\x82\x69\xb6\x05\xc3\xf3\x35\x7c\xd8\x84\xc1\x95\x77\x5f\x8e\x16\xc6\x60\x4d\x1f\x6f\x99\x6f\xd1\x60\xf3\x5d\x0d\x8e\xd9\x01\x03\x2f\x62\x35\xb7\xea\x3d\x76\x9d\xf9\xe1\x91\x9d\x39\x08\x69\xb9\x46\x07\x5b\xd9\xee\xcc\xc5\x6a\x6d\x83\xaa\x8d\x67\x64\x35\x0b\xab\x69\x39\xb2\x6c\x86\xc4\x13\x38\xbd\x3f\x3b\x6d\xcb\x15\x08\xf7\x1c\xca\x12\x3b\xa4\x53\xd4\x61\x7e\x52\x45\x79\x85\xd5\xf3\x8b\x09\xcb\xe0\x40\x84\x0c\x8f\x02\x5c\x59\xe6\xf9\xb1\xe5\x7a\x2b\x24\xc9\x8a\x68\x9f\x9f\xed\x5b\x10\xc2\x2a\x5c\x8f\xb5\x90\x59\x4c\xb4\xb3\x20\x1f\xa2\x21\x1b\xa4\x4a\x5c\x0c\x7d\x8a\x64\xce\xcf\x06\x96\x20\xe7\x72\x56\xf3\x34\x20\x7f\x14\x77\x47\xfc\x9a\xdb\x46\xfc\x62\x0d\x24\x2f\x58\x2e\xe1\x34\xd6\x73\xcf\xe4\x69\x4f\xe3\xdf\xc1\xe9\xfd\x7a\xcf\xc7\x51\x6c\x2d\xab\xe6\x84\x1d\xcf\x5f\xb6\xb0\x83\x38\xa8\x44\x4c\x6c\xbb\x55\x84\x05\x9c\xde\x3f\x3f\xdd\xf3\x99\x5f\xf4\x28\xc6\x28\xb3\x63\xcc\xbd\x7a\x14\x6f\xd3\x79\x19\xe3\xe1\xc5\x83\x78\x98\x36\xf6\xd8\xb8\x6d\x4c\xdf\x3f\xee\x94\x31\x47\x55\xa1\xaf\xbf\x57\x3d\x72\x00\xb5\xba\x3e\x06\x45\xfd\x0c\x12\x67\x23\x85\xe6\x68\xd1\x18\x72\x56\xb4\xe8\x13\x98\xbc\x65\x98\x31\xdb\xf5\xf1\xab\x7d\x06\x5f\xd9\x60\x6d\xf8\x14\x70\x69\xeb\x13\x5e\x64\xaa\x1f\x89\xfb\x19\x76\x64\x3c\x1c\x08\x59\x94\xb6\x0e\x8a\x9b\xfc\x2a\xe2\x1a\x41\x81\xd2\x15\x64\x7f\x1c\xaf\xbf\x3b\x3f\xdb\x8b\x19\x55\xd6\x1f\x01\xc7\x62\x01\x6f\xbd\xd7\x00\x53\x30\xf4\x30\x4a\xc3\x15\xd2\xb8\xc2\x44\xc0\xa5\x29\x2e\xa5\xc6\x80\x1d\x03\x55\x1f\xa5\x17\xca\x83\x0e\x26\xf3\xc2\x4e\x71\xe3\x1e\xfc\x9d\x1f\x3e\xbd\x7f\x71\xda\xeb\x80\xf1\x87\x84\x3c\x44\x61\xb5\x77\x10\xbd\x0d\xe9\x67\x9a\x6e\xdf\xaf\x48\x40\x73\xeb\x09\x38\x7f\xd1\xaf\x92\x27\x18\x09\xc2\x92\x90\x97\xc8\x4d\xd3\xcb\xc1\xa5\x36\x6c\xcb\x5d\xbe\xc0\x9c\xfb\x49\x4b\xad\x71\x9d\x5b\x4a\xd3\x76\xf9\xae\x04\xe0\xd2\x8e\x43\x54\x2b\x1a\xcf\xad\xdd\x80\xba\x50\x42\xeb\x68\x4c\x76\xed\x91\x23\xc6\x5e\x24\x2e\x27\xf8\x93\x9f\xf7\x79\xe1\x77\xaa\x10\xbc\xb1\x62\xb2\x1d\x9a\xc8\x9e\xf0\x67\xbf\x2c\xe2\x80\xc7\xc5\x2b\x6d\xc1\x50\xc9\xcb\x50\x11\x63\xd8\x80\xa8\xeb\x3e\xa9\x50\xa3\x50\x2c\xb7\x4c\x93\xf2\x2f\x83\xe9\x34\xe2\x99\x5f\x74\x7c\xf3\x40\x74\xe4\x7f\xaa\x82\x22\xd2\x58\x0c\xf5\x83\x18\xdb\xe7\x1e\xae\x61\x20\xf8\xea\xcf\x78\x3c\x2f\xa3\x89\xf0\x1a\x04\x32\x42\x82\x2e\x25\x6f\xb2\x2b\xd2\x56\xf8\x49\x59\x5f\x98\xa2\x32\x87\x2a\xb8\xa6\xe2\x4c\x84\x55\x3e\xf9\x17\x5b\xca\x3b\x0b\xa5\x5d\x15\xb3\x49\xe2\xa2\x60\xc8\xe5\xe6\x61\x05\xa5\xc2\x8f\xba\x3c\xe5\xaa\x28\x0e\x69\x52\x96\xe7\x70\xe5\xd8\xe1\xdb\xc2\xee\x66\xf3\x2b\x74\x45\x3b\x55\xba\x72\x53\x55\x31\xbb\x91\xea\x0e\xee\x36\x1c\x51\x2a\x66\xaf\x56\x29\x61\x80\x48\x80\xd2\x98\x3a\xec\x57\x40\x37\x5f\x0e\x4a\x4e\x09\xf3\xdc\x18\x5e\x90\x23\x01\xde\xb8\xb6\xb5\xc3\xbb\xc5\x02\xde\x5b\xa6\x5d\x41\x8f\x60\xf4\xf8\xfc\x39\x6c\x39\xf3\x0b\xf8\xc3\xfb\xef\x5c\x69\x62\xc5\xe9\x3b\xba\x02\xb8\xe3\x90\x32\xcd\x81\xad\x54\x69\x23\xb5\x45\x75\x5b\x36\x6a\x04\xc7\x70\x1e\x78\x6b\x6c\xc1\x65\x06\x4b\x6a\x77\xd4\xe8\xd8\x45\x98\xa2\x3a\x26\xc1\x01\xe7\xe9\x05\xb5\x7d\x83\xfd\x28\x5f\x3d\x3a\x6a\x47\x05\xd8\xfa\x15\xac\x2e\x06\x12\x58\x58\xc5\x49\x1a\xc2\x0a\x22\xf7\xe5\xe5\xbc\x95\xa6\x62\x08\xb2\x82\x37\x70\x7a\xff\xaa\x13\x7a\x80\x4f\x30\xe2\xf0\x83\x8c\x00\x78\x6e\x38\x88\xb5\xef\xfb\x87\xb1\xbe\x67\xe3\x7d\x2f\xc7\xfa\x9e\xef\xe9\xfb\x6a\xa4\xef\x8b\x3d\x7d\xdf\x8d\xf4\xfd\xa6\xb7\xef\x60\xf3\x56\x9c\xfe\x71\x38\x56\xab\x17\x7e\x0f\x8e\xe8\x12\x59\xed\xb3\xb4\xd9\x86\x99\xba\x3a\x8f\x96\x72\x3a\x7f\x9c\xd9\x0d\x0e\x95\xc0\x25\xc3\x69\x2b\x04\x80\x3b\x61\xf8\x80\x05\x3a\x10\x19\xb7\xc1\x95\x52\x79\x9f\x1b\xac\xac\x81\x62\xdf\x69\x81\x42\xa1\x8c\xb0\xe2\x96\x83\x2c\xb7\x2b\xae\x91\xf7\x2b\x62\xf1\x8a\x0a\xae\x06\x72\x7e\x2f\x52\x75\xad\x59\xb1\x11\x08\x76\x3b\x57\x1c\x8f\x20\xcc\xf9\xf5\x84\xdc\xe7\x35\x6b\x91\x13\xd6\x53\x5a\xf1\xb5\xc2\x00\x4d\x69\xf8\x3b\xd7\xca\x8b\x29\x22\x84\x3e\x92\x76\x7d\x3c\x66\x05\xe5\x5f\x84\x0b\xfe\x4b\xc9\xf2\x13\x78\xa7\xb6\x05\xd3\xc2\x28\x89\xd2\xcd\x94\xe4\x50\x70\x7d\x8c\xb8\x96\x44\xe4\x94\x84\x52\x8a\x54\x65\x18\x96\x64\x9c\xa2\x42\x33\xb8\xbe\x2e\xa0\x0d\xbc\x3b\x8e\xd2\x09\x89\x48\x38\x4e\x1f\xc2\x52\x72\x5f\x87\x00\x8a\x7d\xdd\xdc\x4f\x2b\xad\x27\x30\x18\x0b\x11\xa9\x40\x0d\x92\x6a\xcf\x09\x87\xef\xd3\x89\xbe\xac\x9b\x6a\xf1\xdc\xd8\x1a\x51\x23\xa4\x44\xb4\x22\x72\x4e\x67\xde\x04\x1e\x3b\x4e\xc8\x1a\x2a\x4d\xf3\x8b\x27\x11\x28\x63\xd7\x16\x74\xc7\xa8\x4d\x3d\x5d\x0b\x4f\x24\x6a\xd2\xa0\xb6\xc8\xee\x1d\x6a\xe3\x1f\x6f\xea\xc1\xdd\xf7\xa3\xbe\x52\x23\x75\x63\x17\xdd\x67\x83\x88\xde\x41\x1e\xd6\x84\xfe\x7e\x26\xf3\x4e\x9b\x55\xd3\xa6\x9a\xcc\x58\xc9\x12\xa5\xcb\xe0\xab\x25\xac\xfa\x90\x71\xb1\x80\x1f\x99\xb9\x01\x55\x5a\x10\x5a\xf3\x9c\xdf\x32\xe4\x78\x57\x6d\x1f\xa4\x1b\x9e\xde\x00\xbb\x66\x42\x76\x3a\x87\x75\xcb\xff\x9b\x9d\x51\xdd\xf2\x15\x54\xc5\xcb\x7a\xb9\x8e\x50\x64\x73\x2a\x64\xce\x2f\x3a\x44\x70\x51\x32\x81\x79\x32\xf2\xf9\x3b\x57\x73\x84\x63\x74\x60\xfe\x4b\xb7\x0f\xce\x89\xfa\x7c\xd5\x29\xdc\x54\x1f\xaf\xf3\x98\xb4\x63\xcb\xf9\x10\x96\x83\xcf\xf4\x2b\xd7\xd4\xf2\x6b\xb5\xba\x74\xaa\xbb\x3d\x03\x35\x7a\x0b\xc7\xf4\xa0\x51\xd3\x69\x55\xb8\x00\xb4\xa3\x0d\xa7\x66\xa3\x90\xd2\x98\x30\x54\x7f\x20\x7a\x34\xce\x64\x2a\x78\xb4\x1d\x4a\x80\x84\x09\xac\xa7\xb9\x14\x6c\x6c\x0e\x01\x93\x01\x07\x53\xc3\x12\xd1\xf0\xbd\xf7\xf9\x9a\x3f\xdc\xbb\xa3\x07\xc1\x1e\x2d\x22\x35\x54\x92\xf5\x61\xa9\x55\x70\x85\xcf\xd1\x8d\x64\xb7\x4c\xa6\x3e\x51\x8a\x00\xbd\x16\x97\x4b\xf0\x7d\x04\x2f\xf9\xbd\xa7\xd9\x6c\xe2\x60\xef\x38\xdd\x3c\xcc\x9f\xbb\xb6\x44\x34\x68\x8b\x99\x06\x05\xb3\xa1\x6e\x34\x73\xea\xac\x9e\x9b\xd1\xc0\xb2\x54\x5b\x7f\x3d\x0b\x83\xdd\xa6\x25\xc0\x38\xea\xcf\x1d\xe4\x8d\x30\x3e\x0e\x0b\x3a\x25\x31\xa2\x50\xc5\xca\x4f\x7a\x6c\x19\x5b\xf4\xee\xaf\x54\x51\x76\x2b\x9f\x0c\x60\x77\xb1\x80\x1f\x14\xcb\x02\x31\x51\xf8\xef\xdd\xa0\x57\x03\xbf\x8a\x3f\xbc\xff\x8e\xfc\xfe\xaa\x2f\x11\x6d\x85\xe0\xa6\x5c\xf9\xbf\x9a\x62\xfd\xf9\xd9\x7c\x9e\xc0\xf9\xf3\x79\x4f\x70\x3e\x16\x98\xbb\xa9\x87\x25\xc1\xbd\xf1\xb8\xeb\x72\x36\xdc\xa5\x1b\x86\xbb\x2e\xe7\x9d\x2e\x7d\xad\x5e\x0c\xee\x66\x91\x53\x40\x5f\x69\x75\x29\x5d\x75\xa1\x09\x6c\xa2\xd9\xd2\x1e\x5d\xe0\xd1\x47\x56\xbd\x27\x34\x00\x8f\xce\x4e\xb5\x8e\xf6\xb4\x79\x90\xf2\x44\xe4\x23\xc2\x0d\xd1\xe3\xd6\x2f\x21\xd7\xf1\x0f\xed\xc1\xf6\x17\x16\x06\x90\xa8\x85\x3e\x2d\xc4\x89\x13\xf7\x16\xfa\x3c\x2a\x71\x78\xdb\x2d\x9f\x51\xf9\xa0\xc5\x2a\xed\xd1\x8c\x96\xd1\x7a\x50\x65\x72\xc5\xb5\xe9\x4b\x16\x85\xbf\x4e\x15\xa7\x8f\xf7\xbd\x65\x3b\x8e\x6b\xd5\x8c\x24\xfc\xe8\xb2\xc6\xe1\x43\xb5\x44\xa4\x74\x36\xa1\xc8\xd1\x16\xce\x04\x28\xed\x6c\x5e\xb5\xc1\xf2\x4e\xe9\xec\x62\x1f\x7e\x66\xe2\x16\xd1\x05\xc3\xba\xb3\x17\xaf\x2e\x9e\xf4\xa2\x69\x8c\x9d\x3f\x8e\x61\x27\x0e\x5a\x87\xae\x7d\xa8\x19\x22\x25\x86\x85\x2b\x58\x52\x27\x58\x20\x2f\x17\x93\x50\xd4\x95\x1b\x5b\x11\xf7\x03\xa0\xd5\xd3\xa1\x4d\x9c\xe7\x97\x7d\xe4\x0e\x82\xdd\x90\xdc\x69\x2f\xb9\x7d\x90\x1c\x51\xf8\xb7\x3e\x0a\x9f\x03\xae\xc7\x34\x2b\xc8\x9d\x48\xda\x20\xe0\x0d\xa9\x15\x88\x6e\xad\xcb\x29\x17\xfe\xbb\x80\xb3\x6f\x5a\xa5\x16\x5c\xf8\x59\xb3\xf2\x73\x9a\xf4\x65\x4b\x6c\x4e\x0b\xf0\x97\x77\xa7\x94\x08\x0c\x14\xbb\x16\x0b\xf8\x5e\xde\xb2\x5c\x64\xf0\x5f\x1f\x2e\x8f\x5f\x81\xe1\xbf\x94\x9c\xce\x9d\xb5\x3e\xdd\xd9\x41\x27\x57\x70\xcb\x30\xc3\xff\x9e\xc1\xcb\x17\x73\xf8\xdf\x8a\x8b\xf3\xcb\x79\xaf\x58\x0e\xaf\x35\xdf\xf0\x34\x65\x37\xc7\x67\xdf\xbc\x84\x0d\x33\x71\xe1\x74\x3f\x6a\x61\x97\x5e\xbc\x1a\xa4\xd5\x82\x25\x37\xfc\xbe\xd2\x8f\xdf\x49\x6b\x81\xd3\x40\x6e\x8b\xe2\x7a\xbd\x04\xb3\x61\xe7\x03\xf1\x52\x93\xf4\x1e\x78\x82\xa4\x4a\x9a\xfc\x7e\x9c\xb1\x74\xf8\xc9\x9d\x5e\x94\x9c\x67\x39\x7f\x54\xe4\xed\x48\xc4\xad\x0d\x67\x3a\xdd\xa0\xbe\x4f\xa8\xbb\x85\x0c\xe1\xd3\xfa\xc8\x19\x66\x71\x53\x33\x27\x47\xe4\xbf\x85\xdd\xf4\x04\xe9\x8e\xc5\x29\xe9\x53\xec\x3a\xde\xf8\x9e\x63\x96\x4e\xec\xf5\xaa\x75\x43\x8b\xa2\xfe\x65\x4d\xac\xb0\x7a\x80\x18\x2e\x55\x2f\x2d\xe4\xd3\x65\x87\x93\x4e\x3a\x21\xf3\xb5\x23\xf1\xb3\xef\x34\xaa\x92\xfa\xba\x61\xeb\x38\x4d\xb7\x87\xa3\xd4\xe9\xe3\x1e\xf7\xf6\x22\x96\xb1\x35\xff\x65\x46\xba\xed\x07\x4d\xe8\xe4\x56\xe2\xf4\xbd\x26\xeb\x9e\x8e\x9c\xe3\x09\x24\xd0\xaf\xf3\xdf\x8f\xaa\x79\x52\xff\x05\xc2\x80\xe6\x5b\x75\xcb\xb3\xfa\x44\x7a\x14\x32\xae\xf8\xb5\x90\x2e\xb8\xab\x48\x9e\xc0\x9f\x2a\x25\x4c\xea\xcd\xed\xf0\x68\xe2\x67\xb4\x22\x37\x7c\xbf\x29\xac\xf8\x4e\xc9\xec\x20\x33\xe8\x64\xab\x87\xdb\x01\xb6\xde\xa3\xba\xb0\x6c\x29\x78\x6c\x21\x5f\x8d\x5a\xc8\x48\x4d\x70\x92\xc6\x3f\x4c\xeb\x1f\xae\xf9\x8f\xd7\x7e\x68\x6d\xa9\x44\x62\x23\xd2\x6d\x19\x45\xf9\x58\xb0\x64\x23\xe9\x62\x6f\xab\xae\x6f\x6e\x56\xf7\xd0\x0d\x1c\x2e\xb3\xdf\x9c\xb3\xc1\x39\x7d\x51\xae\x66\xa0\xb0\x1f\xee\xbb\xc2\x71\xbc\xd6\x1d\x3e\xbe\x4c\x27\xf5\xf9\x5d\xce\x23\x7c\x4e\x57\xd7\x0f\xf0\x38\x5c\x66\xbf\x3e\x5f\x53\x4a\x2b\xf2\x2f\xc6\xd5\x3c\xc0\x0c\xba\xba\x3b\xe8\xa5\x3e\x9f\x8f\xfa\xad\x78\x9b\x29\x7e\x64\x11\x25\x76\xfe\x42\x13\xcb\x32\xcd\x8d\x89\x2b\x47\x61\x41\xda\x3d\x51\xa9\x3b\x13\x97\xe2\xf3\x8a\x5c\x63\x70\xb2\xde\xee\x56\xba\x4d\xc7\xdd\x1b\xab\x2c\x6b\x4d\xb7\xc2\xd6\xaa\x94\xde\xb0\x6a\x05\x5f\x0b\x99\xfd\xa7\xd5\x2e\x6b\xc7\xd6\x74\x6a\xad\xfe\x46\x82\xa4\x6f\x6e\xd4\xe6\xd7\x5a\xd0\xcd\x7d\x8e\xf1\x83\xd7\xd1\x2e\x6b\xb5\xc1\xda\xc2\xe9\x7a\x10\x78\xb3\xac\xb8\x69\x2f\x4b\xa7\x5d\x77\x1f\xd6\x4b\xea\x4f\x85\x15\x5b\xf1\x77\x3a\xeb\xea\x15\x77\xad\x34\xbc\x7c\x45\x97\x0c\x0b\xae\xbd\xc8\xa5\xdb\xa9\xac\x2e\xc5\x74\x48\x8d\xa8\x7d\xa5\xd1\xb4\x07\xfa\x7a\x49\xf7\x2c\x4c\xb9\x9a\xf1\xfb\x62\x76\x96\xc0\xb6\xcc\x67\xaf\x12\xc0\x27\xe7\x67\x49\x23\xc3\x39\x26\xbc\xcf\x7b\x74\x1c\x22\x0b\xa1\xd3\x8a\xd1\x76\x43\x23\xf5\xbe\xbb\x19\x21\x05\x84\xdb\xe0\x0a\x81\x3b\x08\x57\xae\x66\xf5\x1a\x07\xcc\xf4\x12\xf1\xe6\xe9\x3b\xf7\x8f\xa3\x54\xf1\xba\xf7\x97\xbf\x95\xdb\x42\xcc\xf8\xbd\xb0\x09\x9a\x6b\xfb\xc8\x12\xb1\x9e\x04\xb3\x1c\xe7\xa1\x3e\xe5\xfa\xbc\xbf\x99\x1b\x0d\xb9\x49\x20\x77\x0b\xe0\x9b\x27\x28\x87\xfd\xc4\x1b\x09\x79\x9d\xeb\xed\x80\xd3\xe9\x4e\xf7\x63\xe7\x89\xc7\x82\x48\xe1\x61\xec\xb8\xd1\x62\x41\x77\xd5\x72\x25\xaf\xbd\x4c\x4c\x02\xa5\x71\x05\x1b\xba\x89\xd6\xfa\x54\xb5\x17\xfc\xbd\xbb\x39\x1e\x54\x5c\xa9\xe2\x53\xd5\x5d\x02\x6c\x6c\x16\xbf\x87\xff\xc6\xbd\x74\xa6\x00\x55\x95\x2f\x3e\x1c\x51\x1b\x6b\xed\x7e\x5c\xd5\x2f\xbb\xef\xd6\xfd\xda\x73\xb0\xdc\xd8\xff\xe8\x9d\x47\x6b\x2e\x55\xc3\x7a\x3e\xfb\x67\x02\x1e\x2f\x48\x0c\xcb\x65\x4d\xa2\x7f\x7d\x61\x64\xed\x42\xd9\x74\x0f\xce\x41\x47\x0f\x46\xce\x8a\xd5\x87\x0d\x2a\xa1\x3d\xca\x61\x34\x17\x84\x73\xf6\x00\x97\x11\x10\xde\xef\x2c\xf4\x67\xf6\x16\xff\x04\xdf\xf0\xef\xbf\x75\xdf\xd0\x8b\x7a\x87\xf8\x85\x7d\xa0\x4f\x67\xb3\x1f\x8f\xf9\x01\x88\xef\xc5\xfc\x6b\x3b\x0b\x5c\x44\x52\xe9\xe2\xc3\x1d\x1b\x12\x27\xef\x35\x78\xb4\xa8\x5f\x02\x6d\x7f\xd5\xc8\xf2\x5f\x0e\x25\xc0\xbd\x59\x8f\xb7\xe8\x39\xe4\xe5\xae\xfe\xa2\x24\xe1\xdb\xba\xfb\xaf\xd5\x9d\xc0\x51\xe0\x19\x07\x95\xe7\xf8\x93\xb8\x96\xb1\x6c\xfe\x47\x97\x60\x57\x57\x60\xfc\x95\x2d\x3a\x42\xc4\x6f\xb9\x6e\xbf\xc5\x64\x28\x11\xa9\x0f\xdc\x56\xae\xc5\xef\xff\xfa\x2c\x3f\xb8\x19\xd1\x64\xf7\x86\xd7\x07\xa5\xdc\x99\x67\x6a\x11\x91\x13\xeb\xa8\xa0\xd0\x72\x44\x63\xe5\x00\x9f\xe0\xd3\x8b\x48\xe8\x06\xff\x48\x55\x80\x5e\xd7\x31\xa5\x28\x30\x50\x1f\x43\x37\xf8\xb8\xa2\x40\xe5\xe3\x60\x59\x67\x60\xa6\xe7\xd2\x50\x12\xe6\x9d\x49\x94\x9a\x0f\x9c\x52\x71\x37\x15\x7a\x8e\xbe\x06\x3b\x35\x31\x90\x4c\xac\x80\x8e\xe8\x0d\xd5\x19\xfd\xab\x71\x82\x57\x97\xd4\x3a\x44\x35\xc9\x8e\xe2\xd4\x64\x5a\x6a\xd3\xa3\x71\x4d\x69\x95\x8a\x51\xfe\x4b\xac\x38\x81\xb2\x24\x7b\x75\xee\xcb\x52\x27\xfd\x49\xf5\x49\x7f\x42\x85\x1a\xd1\xa7\x89\x6a\xf3\xbe\xc8\x85\x3f\x71\xe9\x4f\x35\x19\x6e\x6d\x73\x26\x12\xe5\x16\xe0\x4e\x13\xcd\x92\x1a\x44\x4b\xdc\xaf\x12\xee\xf2\xd3\x95\x55\x37\x5c\xb6\xa9\xb9\x73\xfe\x20\x2c\xea\x4d\x3f\x6c\x65\x8a\x3b\xcd\x21\xea\x61\x80\xbc\x4f\x87\xe2\x03\xfe\x21\x13\xad\x2e\x74\x07\xd7\xee\x82\xe2\xe7\x7e\xed\x43\xa9\x1d\xa4\x71\x0d\xe7\xed\x6e\xc4\x14\xbc\x95\xa0\x4a\x5b\x94\xf4\x6e\x10\xb6\xe5\x24\x66\x85\x2e\x36\xdd\x04\x66\xe7\x1a\x0b\x03\x77\x5a\x58\xcb\xbb\xc7\x9e\xfc\x1c\x87\x76\xa9\xe9\x1d\x40\x43\x9a\x9c\xd4\x13\xbc\x41\xff\xfa\x99\x61\x92\x46\xed\x39\xa1\xda\xfa\x7d\x8f\xda\xa3\xfb\xf7\x3b\x09\xbd\xf5\xd7\x76\x78\xb2\x58\xc0\x4f\x15\x2e\x0d\x54\x17\xa3\x03\x8b\xbd\x21\x5d\x84\xf0\x01\x9f\x47\x53\x36\xc1\x96\x51\xf4\xd1\xa9\x60\xb6\xec\x99\xa8\x7f\x01\x06\xdd\x9c\x9d\xfe\xe7\xd9\x73\xbf\xf5\xba\x8d\x0e\xe4\x6e\xca\x2e\xc5\xa7\xb1\xe4\xe0\x0c\x4f\xe5\x68\x3d\x33\xed\x97\x8e\xb5\x64\x9a\xf1\x5c\x6c\x1f\x66\xad\xc3\x67\x35\xbd\xfd\x36\x3a\xea\x09\x11\x89\xca\xd4\x5d\xa3\x4f\xa8\x49\x7e\xf1\xab\x4a\xc7\x23\x5d\x83\xd3\xcb\x7f\x79\x86\xcf\xe5\x19\xf4\x3f\xd0\x35\x3c\x3e\xe2\x89\x7c\xc3\xb0\x57\x08\x77\xd9\x66\x2d\x17\x31\x1f\xf7\x11\x5f\x82\x5f\xf8\x87\x83\xfd\x43\x4d\xb4\x17\xec\x3f\xaf\x85\xfe\x1a\xb0\x7e\xac\xd4\xbb\x07\xea\xf7\x98\xdf\x01\x58\xaf\x1f\x06\xf6\xef\x54\x29\x6d\xfb\x80\xbe\x54\x52\xdd\x72\x9d\xb3\xa2\xa0\x93\x68\xf5\x84\x4c\xa8\x23\xc3\x00\x36\x94\xb6\x7d\xca\x35\x68\xb8\x1d\x62\x8f\x6c\xb8\x4b\xa5\x73\x91\xb6\x94\x87\x2d\x00\x21\x1c\x75\xfb\xb4\x21\xf1\x10\x3c\x04\xe5\xb6\x37\x13\xa3\x5b\xe2\xee\xe8\x28\x0e\x3d\x07\x98\xeb\xc3\x4c\x7a\xdf\xcc\x03\x58\x9d\x72\x2c\xf8\x43\x7c\x2c\xd8\x17\x2b\xcc\x01\xc7\xb4\x3e\xb1\x32\x55\xfc\x04\xf5\xad\x96\xea\x4c\x3d\x9f\x55\xcd\xe5\x51\xe7\xb3\xaa\x53\xe9\x0f\xd5\xa2\xaf\x3a\x59\xd4\x84\x57\x01\x4d\x78\x1d\x4d\xaa\xe8\x82\x82\x64\xee\x86\x4c\x6f\xd5\x88\x62\x2a\xf7\x72\x80\xe9\xd7\x60\x2b\xb2\x07\x5d\xa4\xef\xe9\x14\x80\x43\x9b\xd7\xe6\xe2\xae\xdb\x2e\x1a\x5e\xbf\x94\xf5\x81\xc1\xe0\x35\xd8\x43\xdf\xac\x03\x47\xd0\xb9\x7a\x0c\x8f\x79\xcd\x4e\xd5\xf6\xb0\xb7\xec\x44\xad\x43\x20\x49\x82\xbb\xf7\x49\x3f\xab\xd3\x6e\x4d\xfc\x51\xa1\x4d\xd3\xbb\x73\x35\x23\xcf\xed\xee\x26\x27\xfe\x95\x39\x95\xc2\xa0\xfe\x91\x87\x14\xf4\xde\xed\x26\xe2\x68\xbd\x03\xad\x57\x45\x07\x75\xac\xa6\x88\xca\x52\x9a\x8e\x66\xb9\xf7\xb0\xbe\x85\x5c\x18\xdb\xf0\x86\x8d\xff\xa6\x44\xdf\xd5\xbb\xfd\x26\xc2\xf2\x3c\xbc\x82\x8d\xd8\x41\xa3\x5c\xc5\x31\x0d\x00\x0d\x51\xbd\xd8\x76\xd4\x35\x61\xc3\xae\x32\xfe\xe5\xaf\x8e\xfd\x69\xea\x48\x31\x2f\x36\xf7\x6f\x9e\x1c\x7e\xa3\xe2\xd7\x5f\x5f\x74\x2f\xee\x46\xc1\xf5\xb3\x16\xa9\xf8\xb5\x01\x6b\xa5\x9b\x3b\x46\xa7\xee\x8e\x51\xd8\xdc\x5d\x36\x8a\x46\x26\x83\x58\xba\x56\x7f\x11\x7f\xed\x7b\x6d\x44\xc7\x94\x3e\xf5\xeb\xa9\x90\xed\x51\x8e\x5b\xae\xb5\x65\x68\x0d\xef\xad\xaf\xdd\xad\xb3\xca\xda\x3a\x13\x0e\x1b\xe1\x7a\xb5\xf9\x20\x41\xf7\xbd\x26\xf7\x20\x9b\xef\xb2\x61\xfa\xaf\xec\xf6\x9e\xc6\xeb\x5a\xfd\xc7\xff\x0f\x00\x00\xff\xff\xeb\xc4\x16\x70\x6c\x60\x00\x00")

func TruffleContractsUtilsStringsSolBytes() ([]byte, error) {
	return bindataRead(
		_TruffleContractsUtilsStringsSol,
		"../../truffle/contracts/utils/Strings.sol",
	)
}

func TruffleContractsUtilsStringsSol() (*asset, error) {
	bytes, err := TruffleContractsUtilsStringsSolBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../truffle/contracts/utils/Strings.sol", size: 24684, mode: os.FileMode(420), modTime: time.Unix(1535536576, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x99, 0x22, 0xc1, 0x32, 0x20, 0x0, 0x89, 0x48, 0x5, 0x25, 0x60, 0x37, 0x74, 0x3, 0xbc, 0xe1, 0x4d, 0x6a, 0x6f, 0x37, 0xf4, 0xe, 0x7c, 0x14, 0x5b, 0x1a, 0xda, 0x16, 0xbf, 0x50, 0xb9, 0x3f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../truffle/contracts/utils/NameHash.sol": TruffleContractsUtilsNamehashSol,

	"../../truffle/contracts/utils/Strings.sol": TruffleContractsUtilsStringsSol,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"truffle": &bintree{nil, map[string]*bintree{
				"contracts": &bintree{nil, map[string]*bintree{
					"utils": &bintree{nil, map[string]*bintree{
						"NameHash.sol": &bintree{TruffleContractsUtilsNamehashSol, map[string]*bintree{}},
						"Strings.sol":  &bintree{TruffleContractsUtilsStringsSol, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
