// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package consensus

import (
	"math/big"
	"strings"

	kowala "github.com/kowala-tech/kcoin/client"
	"github.com/kowala-tech/kcoin/client/accounts/abi"
	"github.com/kowala-tech/kcoin/client/accounts/abi/bind"
	"github.com/kowala-tech/kcoin/client/common"
	"github.com/kowala-tech/kcoin/client/core/types"
	"github.com/kowala-tech/kcoin/client/event"
)

// ValidatorMgrABI is the input ABI used to generate the binding from.
const ValidatorMgrABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"getMinimumDeposit\",\"outputs\":[{\"name\":\"deposit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"freezePeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxNumValidators\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"superNodeAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDepositAtIndex\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"availableAt\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"baseDeposit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deregisterValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getValidatorCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"address\"}],\"name\":\"isSuperNode\",\"outputs\":[{\"name\":\"isIndeed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDepositCount\",\"outputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_hasAvailability\",\"outputs\":[{\"name\":\"available\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"registerValidator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxValidators\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"knsResolver\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseDeposits\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorsChecksum\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"setBaseDeposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_baseDeposit\",\"type\":\"uint256\"},{\"name\":\"_maxNumValidators\",\"type\":\"uint256\"},{\"name\":\"_freezePeriod\",\"type\":\"uint256\"},{\"name\":\"_superNodeAmount\",\"type\":\"uint256\"},{\"name\":\"_resolverAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"address\"}],\"name\":\"isGenesisValidator\",\"outputs\":[{\"name\":\"isIndeed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getValidatorAtIndex\",\"outputs\":[{\"name\":\"code\",\"type\":\"address\"},{\"name\":\"deposit\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"code\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"name\":\"isIndeed\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_baseDeposit\",\"type\":\"uint256\"},{\"name\":\"_maxNumValidators\",\"type\":\"uint256\"},{\"name\":\"_freezePeriod\",\"type\":\"uint256\"},{\"name\":\"_superNodeAmount\",\"type\":\"uint256\"},{\"name\":\"_resolverAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]"

// ValidatorMgrSrcMap is used in order to generate source maps to use when we want to debug bytecode.
const ValidatorMgrSrcMap = "{\"contracts\":{\"../../truffle/contracts/consensus/mgr/ValidatorMgr.sol:ValidatorMgr\":{\"bin-runtime\":\"60806040526004361061016a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063035cf1421461016f5780630a3cb6631461019a578063158ef93e146101c55780632086ca25146101f4578063268331481461021f5780633ed0a3731461024a5780633f4ba83a146102925780635c975abb146102a957806369474625146102d85780636a911ccf146103035780637071688a1461031a578063715018a6146103455780637d0e81bf1461035c5780638456cb59146103b75780638da5cb5b146103ce5780639363a1411461042557806397584b3e146104505780639abee7d01461047f5780639bb2ea5a146104cc578063a2207c6a146104f9578063aded41ec14610550578063b774cb1e14610567578063c22a933c1461059a578063ccd65296146105c7578063cefddda914610632578063e7a60a9c1461068d578063f2fde38b14610701578063facd743b14610744575b600080fd5b34801561017b57600080fd5b5061018461079f565b6040518082815260200191505060405180910390f35b3480156101a657600080fd5b506101af610872565b6040518082815260200191505060405180910390f35b3480156101d157600080fd5b506101da610878565b604051808215151515815260200191505060405180910390f35b34801561020057600080fd5b5061020961088b565b6040518082815260200191505060405180910390f35b34801561022b57600080fd5b50610234610891565b6040518082815260200191505060405180910390f35b34801561025657600080fd5b5061027560048036038101908080359060200190929190505050610897565b604051808381526020018281526020019250505060405180910390f35b34801561029e57600080fd5b506102a761090f565b005b3480156102b557600080fd5b506102be6109cd565b604051808215151515815260200191505060405180910390f35b3480156102e457600080fd5b506102ed6109e0565b6040518082815260200191505060405180910390f35b34801561030f57600080fd5b506103186109e6565b005b34801561032657600080fd5b5061032f610a21565b6040518082815260200191505060405180910390f35b34801561035157600080fd5b5061035a610a2e565b005b34801561036857600080fd5b5061039d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b30565b604051808215151515815260200191505060405180910390f35b3480156103c357600080fd5b506103cc610bc4565b005b3480156103da57600080fd5b506103e3610c84565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043157600080fd5b5061043a610ca9565b6040518082815260200191505060405180910390f35b34801561045c57600080fd5b50610465610cf6565b604051808215151515815260200191505060405180910390f35b34801561048b57600080fd5b506104ca600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d09565b005b3480156104d857600080fd5b506104f760048036038101908080359060200190929190505050610d96565b005b34801561050557600080fd5b5061050e610e3a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561055c57600080fd5b50610565610e60565b005b34801561057357600080fd5b5061057c611135565b60405180826000191660001916815260200191505060405180910390f35b3480156105a657600080fd5b506105c56004803603810190808035906020019092919050505061113b565b005b3480156105d357600080fd5b5061063060048036038101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111a0565b005b34801561063e57600080fd5b50610673600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113bf565b604051808215151515815260200191505060405180910390f35b34801561069957600080fd5b506106b860048036038101908080359060200190929190505050611418565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34801561070d57600080fd5b50610742600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114cf565b005b34801561075057600080fd5b50610785600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611536565b604051808215151515815260200191505060405180910390f35b6000806107aa610cf6565b156107b957600154915061086e565b6008600060096001600980549050038154811015156107d457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600181600201600183600201805490500381548110151561085857fe5b9060005260206000209060020201600001540191505b5090565b60035481565b600060159054906101000a900460ff1681565b60025481565b60065481565b6000806000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201848154811015156108eb57fe5b90600052602060002090600202019050806000015481600101549250925050915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561096a57600080fd5b600060149054906101000a900460ff16151561098557600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600060149054906101000a900460ff1681565b60015481565b600060149054906101000a900460ff16151515610a0257600080fd5b610a0b33611536565b1515610a1657600080fd5b610a1f3361158f565b565b6000600980549050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a8957600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080610b3c83611536565b1515610b4b5760009150610bbe565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019050600654816001838054905003815481101515610ba757fe5b906000526020600020906002020160000154101591505b50919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c1f57600080fd5b600060149054906101000a900460ff16151515610c3b57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020180549050905090565b6000806009805490506002540311905090565b60408051908101604052808373ffffffffffffffffffffffffffffffffffffffff16815260200182815250600a60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155905050610d92611701565b5050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610df457600080fd5b600980549050831015610e2e5782600980549050039150600090505b81811015610e2d57610e206117bf565b8080600101915050610e10565b5b82600281905550505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600060149054906101000a900460ff16151515610e8257600080fd5b6000935060009250600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020191505b818054905083108015610f02575060008284815481101515610eed57fe5b90600052602060002090600202016001015414155b15610f64578183815481101515610f1557fe5b906000526020600020906002020160010154421015610f3357610f64565b8183815481101515610f4157fe5b906000526020600020906002020160000154840193508280600101935050610ecf565b610f6e338461180b565b600084111561112f57600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b3b57de6005546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561101257600080fd5b505af1158015611026573d6000803e3d6000fd5b505050506040513d602081101561103c57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156110f257600080fd5b505af1158015611106573d6000803e3d6000fd5b505050506040513d602081101561111c57600080fd5b8101908080519060200190929190505050505b50505050565b60045481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561119657600080fd5b8060018190555050565b600060159054906101000a900460ff1615151561124b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f436f6e747261637420696e7374616e63652068617320616c726561647920626581526020017f656e20696e697469616c697a656400000000000000000000000000000000000081525060400191505060405180910390fd5b60008411151561125a57600080fd5b84600181905550836002819055506201518083026003819055508160068190555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550733b058a1a62e59d185618f64bebbaf3c52bf099e063098799626040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260128152602001807f6d696e696e67746f6b656e2e6b6f77616c61000000000000000000000000000081525060200191505060206040518083038186803b15801561135857600080fd5b505af415801561136c573d6000803e3d6000fd5b505050506040513d602081101561138257600080fd5b8101908080519060200190929190505050600581600019169055506001600060156101000a81548160ff0219169083151502179055505050505050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900460ff169050919050565b600080600060098481548110151561142c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160018260020180549050038154811015156114b557fe5b906000526020600020906002020160000154915050915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561152a57600080fd5b611533816118f8565b50565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff169050919050565b600080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150816000015490505b60016009805490500381101561168c576009600182018154811015156115fd57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660098281548110151561163757fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806001019150506115db565b60098054809190600190036116a19190611db9565b5060008260010160006101000a81548160ff02191690831515021790555060035442018260020160018460020180549050038154811015156116df57fe5b9060005260206000209060020201600101819055506116fc6119f2565b505050565b600060149054906101000a900460ff1615151561171d57600080fd5b61174b600a60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611536565b15151561175757600080fd5b61175f61079f565b600a600101541015151561177257600080fd5b61177a610cf6565b1515611789576117886117bf565b5b6117bd600a60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a60010154611a75565b565b61180960096001600980549050038154811015156117d957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661158f565b565b60008060008084141561181d576118f1565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250600091508390505b82600201805490508110156118df57826002018181548110151561188657fe5b906000526020600020906002020183600201838154811015156118a557fe5b9060005260206000209060020201600082015481600001556001820154816001015590505081806001019250508080600101915050611866565b8183600201816118ef9190611de5565b505b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561193457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6009604051808280548015611a5c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611a12575b5050915050604051809103902060048160001916905550565b600080600080600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209350600160098790806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555003846000018190555060018460010160006101000a81548160ff0219169083151502179055506000431415611b705760018460010160016101000a81548160ff0219169083151502179055505b8360020160408051908101604052808781526020016000815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010155505050836000015492505b6000831115611da95760086000600960018603815481101515611bf357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150816002016001836002018054905003815481101515611c7557fe5b90600052602060002090600202019050806000015485111515611c9757611da9565b600960018403815481101515611ca957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600984815481101515611ce357fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600960018503815481101515611d3e57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828260000181905550600183038460000181905550828060019003935050611bd4565b611db16119f2565b505050505050565b815481835581811115611de057818360005260206000209182019101611ddf9190611e17565b5b505050565b815481835581811115611e1257600202816002028360005260206000209182019101611e119190611e3c565b5b505050565b611e3991905b80821115611e35576000816000905550600101611e1d565b5090565b90565b611e6891905b80821115611e6457600080820160009055600182016000905550600201611e42565b5090565b905600a165627a7a72305820191fba81bca640eb79ed9424e349e31a1a476c3140d3d27c954efbfec8e60f0b0029\",\"srcmap-runtime\":\"508:10738:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5457:424;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5457:424:0;;;;;;;;;;;;;;;;;;;;;;;632:24;;8:9:-1;5:2;;;30:1;27;20:12;5:2;632:24:0;;;;;;;;;;;;;;;;;;;;;;;562:23:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;562:23:7;;;;;;;;;;;;;;;;;;;;;;;;;;;598:28:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;598:28:0;;;;;;;;;;;;;;;;;;;;;;;727:27;;8:9:-1;5:2;;;30:1;27;20:12;5:2;727:27:0;;;;;;;;;;;;;;;;;;;;;;;8710:225;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8710:225:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;838:92:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;838:92:5;;;;;;247:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;247:26:5;;;;;;;;;;;;;;;;;;;;;;;;;;;562:23:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;562:23:0;;;;;;;;;;;;;;;;;;;;;;;9273:111;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9273:111:0;;;;;;4652:106;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4652:106:0;;;;;;;;;;;;;;;;;;;;;;;1001:111:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1001:111:6;;;;;;4338:260:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4338:260:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;666:90:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;666:90:5;;;;;;238:20:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;238:20:6;;;;;;;;;;;;;;;;;;;;;;;;;;;8463:130:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8463:130:0;;;;;;;;;;;;;;;;;;;;;;;5141:134;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5141:134:0;;;;;;;;;;;;;;;;;;;;;;;;;;;10932:312;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10932:312:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7338:309;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7338:309:0;;;;;;;;;;;;;;;;;;;;;;;;;;760:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;760:33:0;;;;;;;;;;;;;;;;;;;;;;;;;;;10029:777;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10029:777:0;;;;;;662:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;662:33:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7134:93;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7134:93:0;;;;;;;;;;;;;;;;;;;;;;;;;;3165:538;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3165:538:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3826:135;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3826:135:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4870:265;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4870:265:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1274:103:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1274:103:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;4084:130:0;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4084:130:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5457:424;5507:12;5673:24;5590:18;:16;:18::i;:::-;5586:289;;;5631:11;;5624:18;;;;5586:289;5700:17;:58;5718:13;5755:1;5732:13;:20;;;;:24;5718:39;;;;;;;;;;;;;;;;;;;;;;;;;;;5700:58;;;;;;;;;;;;;;;5673:85;;5863:1;5794:14;:23;;5851:1;5818:14;:23;;:30;;;;:34;5794:59;;;;;;;;;;;;;;;;;;;;:66;;;:70;5787:77;;5457:424;;;:::o;632:24::-;;;;:::o;562:23:7:-;;;;;;;;;;;;;:::o;598:28:0:-;;;;:::o;727:27::-;;;;:::o;8710:225::-;8770:11;8783:16;8811:15;8829:17;:29;8847:10;8829:29;;;;;;;;;;;;;;;:38;;8868:5;8829:45;;;;;;;;;;;;;;;;;;;;8811:63;;8892:7;:14;;;8908:7;:19;;;8884:44;;;;8710:225;;;;:::o;838:92:5:-;719:5:6;;;;;;;;;;;705:19;;:10;:19;;;697:28;;;;;;;;568:6:5;;;;;;;;;;;560:15;;;;;;;;900:5;891:6;;:14;;;;;;;;;;;;;;;;;;916:9;;;;;;;;;;838:92::o;247:26::-;;;;;;;;;;;;;:::o;562:23:0:-;;;;:::o;9273:111::-;416:6:5;;;;;;;;;;;415:7;407:16;;;;;;;;1766:23:0;1778:10;1766:11;:23::i;:::-;1758:32;;;;;;;;9349:28;9366:10;9349:16;:28::i;:::-;9273:111::o;4652:106::-;4702:10;4731:13;:20;;;;4724:27;;4652:106;:::o;1001:111:6:-;719:5;;;;;;;;;;;705:19;;:10;:19;;;697:28;;;;;;;;1077:5;;;;;;;;;;;1058:25;;;;;;;;;;;;1105:1;1089:5;;:18;;;;;;;;;;;;;;;;;;1001:111::o;4338:260:0:-;4394:13;4466:18;4424:17;4436:4;4424:11;:17::i;:::-;4423:18;4419:36;;;4450:5;4443:12;;;;4419:36;4487:17;:23;4505:4;4487:23;;;;;;;;;;;;;;;:32;;4466:53;;4576:15;;4536:8;4563:1;4545:8;:15;;;;:19;4536:29;;;;;;;;;;;;;;;;;;;;:36;;;:55;;4529:62;;4338:260;;;;;:::o;666:90:5:-;719:5:6;;;;;;;;;;;705:19;;:10;:19;;;697:28;;;;;;;;416:6:5;;;;;;;;;;;415:7;407:16;;;;;;;;729:4;720:6;;:13;;;;;;;;;;;;;;;;;;744:7;;;;;;;;;;666:90::o;238:20:6:-;;;;;;;;;;;;;:::o;8463:130:0:-;8511:10;8540:17;:29;8558:10;8540:29;;;;;;;;;;;;;;;:38;;:45;;;;8533:52;;8463:130;:::o;5141:134::-;5190:14;5267:1;5243:13;:20;;;;5224:16;;:39;5223:45;5216:52;;5141:134;:::o;10932:312::-;11167:40;;;;;;;;;11171:5;11167:40;;;;;;11178:6;11167:40;;;11161:3;:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11217:20;:18;:20::i;:::-;10932:312;;:::o;7338:309::-;7448:13;7509:6;719:5:6;;;;;;;;;;;705:19;;:10;:19;;;697:28;;;;;;;;7412:13:0;:20;;;;7406:3;:26;7402:204;;;7487:3;7464:13;:20;;;;:26;7448:42;;7518:1;7509:10;;7504:92;7525:8;7521:1;:12;7504:92;;;7558:23;:21;:23::i;:::-;7535:3;;;;;;;7504:92;;;7402:204;7634:3;7615:16;:22;;;;7338:309;;;:::o;760:33::-;;;;;;;;;;;;;:::o;10029:777::-;10087:11;10112:6;10132:18;10686:13;416:6:5;;;;;;;;;;;415:7;407:16;;;;;;;;10101:1:0;10087:15;;10121:1;10112:10;;10153:17;:29;10171:10;10153:29;;;;;;;;;;;;;;;:38;;10132:59;;10201:404;10212:8;:15;;;;10208:1;:19;:51;;;;;10258:1;10231:8;10240:1;10231:11;;;;;;;;;;;;;;;;;;;;:23;;;:28;;10208:51;10201:404;;;10290:8;10299:1;10290:11;;;;;;;;;;;;;;;;;;;;:23;;;10284:3;:29;10280:273;;;10533:5;;10280:273;10576:8;10585:1;10576:11;;;;;;;;;;;;;;;;;;;;:18;;;10566:28;;;;10261:3;;;;;;;10201:404;;;10615:30;10631:10;10643:1;10615:15;:30::i;:::-;10669:1;10660:6;:10;10656:144;;;10709:11;;;;;;;;;;;:16;;;10726:12;;10709:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10709:30:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10709:30:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10709:30:0;;;;;;;;;;;;;;;;10686:54;;10754:6;:15;;;10770:10;10782:6;10754:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10754:35:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10754:35:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10754:35:0;;;;;;;;;;;;;;;;;10656:144;10029:777;;;;:::o;662:33::-;;;;:::o;7134:93::-;719:5:6;;;;;;;;;;;705:19;;:10;:19;;;697:28;;;;;;;;7213:7:0;7199:11;:21;;;;7134:93;:::o;3165:538::-;714:11:7;;;;;;;;;;;713:12;705:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3403:1:0;3383:17;:21;3375:30;;;;;;;;3430:12;3416:11;:26;;;;3471:17;3452:16;:36;;;;3529:6;3513:13;:22;3498:12;:37;;;;3563:16;3545:15;:34;;;;3618:13;3589:11;;:43;;;;;;;;;;;;;;;;;;3657:8;:17;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3657:39:0;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3657:39:0;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3657:39:0;;;;;;;;;;;;;;;;3642:12;:54;;;;;;;803:4:7;789:11;;:18;;;;;;;;;;;;;;;;;;3165:538:0;;;;;:::o;3826:135::-;3889:13;3921:17;:23;3939:4;3921:23;;;;;;;;;;;;;;;:33;;;;;;;;;;;;3914:40;;3826:135;;;:::o;4870:265::-;4932:12;4946;5007:19;4977:13;4991:5;4977:20;;;;;;;;;;;;;;;;;;;;;;;;;;;4970:27;;5029:17;:23;5047:4;5029:23;;;;;;;;;;;;;;;5007:45;;5072:9;:18;;5119:1;5091:9;:18;;:25;;;;:29;5072:49;;;;;;;;;;;;;;;;;;;;:56;;;5062:66;;4870:265;;;;:::o;1274:103:6:-;719:5;;;;;;;;;;;705:19;;:10;:19;;;697:28;;;;;;;;1343:29;1362:9;1343:18;:29::i;:::-;1274:103;:::o;4084:130:0:-;4140:13;4172:17;:23;4190:4;4172:23;;;;;;;;;;;;;;;:35;;;;;;;;;;;;4165:42;;4084:130;;;:::o;7743:467::-;7804:19;7867:10;7826:17;:26;7844:7;7826:26;;;;;;;;;;;;;;;7804:48;;7880:9;:15;;;7867:28;;7862:150;7928:1;7905:13;:20;;;;:24;7897:5;:32;7862:150;;;7977:13;7999:1;7991:5;:9;7977:24;;;;;;;;;;;;;;;;;;;;;;;;;;;7954:13;7968:5;7954:20;;;;;;;;;;;;;;;;;;:47;;;;;;;;;;;;;;;;;;7931:7;;;;;;;7862:150;;;8021:13;:22;;;;;;;;;;;;:::i;:::-;;8078:5;8054:9;:21;;;:29;;;;;;;;;;;;;;;;;;8163:12;;8157:3;:18;8093:9;:18;;8140:1;8112:9;:18;;:25;;;;:29;8093:49;;;;;;;;;;;;;;;;;;;;:61;;:82;;;;8186:17;:15;:17::i;:::-;7743:467;;;:::o;8992:226::-;416:6:5;;;;;;;;;;;415:7;407:16;;;;;;;;1859:23:0;1871:3;:10;;;;;;;;;;;;1859:11;:23::i;:::-;1858:24;1850:33;;;;;;;;1681:19;:17;:19::i;:::-;1668:3;:9;;;:32;;1660:41;;;;;;;;9095:18;:16;:18::i;:::-;9094:19;9090:73;;;9129:23;:21;:23::i;:::-;9090:73;9172:39;9189:3;:10;;;;;;;;;;;;9201:3;:9;;;9172:16;:39::i;:::-;8992:226::o;8292:115::-;8343:57;8360:13;8397:1;8374:13;:20;;;;:24;8360:39;;;;;;;;;;;;;;;;;;;;;;;;;;;8343:16;:57::i;:::-;8292:115::o;9514:396::-;9616:19;9671:7;9692;9596:1;9587:5;:10;9583:23;;;9599:7;;9583:23;9638:17;:23;9656:4;9638:23;;;;;;;;;;;;;;;9616:45;;9681:1;9671:11;;9702:5;9692:15;;9717:147;9729:9;:18;;:25;;;;9724:2;:30;9717:147;;;9795:9;:18;;9814:2;9795:22;;;;;;;;;;;;;;;;;;;;9770:9;:18;;9789:2;9770:22;;;;;;;;;;;;;;;;;;;;:47;;;;;;;;;;;;;;;;;;;9831:4;;;;;;;9849;;;;;;;9717:147;;;9901:2;9873:9;:18;;:30;;;;;:::i;:::-;;9514:396;;;;;;:::o;1512:171:6:-;1603:1;1582:23;;:9;:23;;;;1574:32;;;;;;;;1645:9;1617:38;;1638:5;;;;;;;;;;;1617:38;;;;;;;;;;;;1669:9;1661:5;;:17;;;;;;;;;;;;;;;;;;1512:171;:::o;5936:97:0:-;6012:13;6002:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5981:18;:45;;;;;;;5936:97::o;6169:895::-;6241:16;6524:10;6585:16;6661:18;6260:17;:23;6278:4;6260:23;;;;;;;;;;;;;;;6241:42;;6335:1;6308:13;6327:4;6308:24;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;6308:24:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:28;6293:6;:12;;:43;;;;6367:4;6346:6;:18;;;:25;;;;;;;;;;;;;;;;;;6401:1;6385:12;:17;6381:46;;;6423:4;6404:6;:16;;;:23;;;;;;;;;;;;;;;;;;6381:46;6446:6;:15;;6467:41;;;;;;;;;6483:7;6467:41;;;;6505:1;6467:41;;;6446:63;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;6446:63:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6537:6;:12;;;6524:25;;6519:511;6559:1;6551:5;:9;6519:511;;;6604:17;:43;6622:13;6644:1;6636:5;:9;6622:24;;;;;;;;;;;;;;;;;;;;;;;;;;;6604:43;;;;;;;;;;;;;;;6585:62;;6682:6;:15;;6723:1;6698:6;:15;;:22;;;;:26;6682:43;;;;;;;;;;;;;;;;;;;;6661:64;;6754:10;:17;;;6743:7;:28;;6739:72;;;6791:5;;6739:72;6847:13;6869:1;6861:5;:9;6847:24;;;;;;;;;;;;;;;;;;;;;;;;;;;6824:13;6838:5;6824:20;;;;;;;;;;;;;;;;;;:47;;;;;;;;;;;;;;;;;;6912:4;6885:13;6907:1;6899:5;:9;6885:24;;;;;;;;;;;;;;;;;;:31;;;;;;;;;;;;;;;;;;6976:5;6961:6;:12;;:20;;;;7018:1;7010:5;:9;6995:6;:12;;:24;;;;6562:7;;;;;;;;6519:511;;;7040:17;:15;:17::i;:::-;6169:895;;;;;;:::o;508:10738::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o\"},\"../../truffle/contracts/kns/DomainResolver.sol:DomainResolver\":{\"bin-runtime\":\"\",\"srcmap-runtime\":\"\"},\"../../truffle/contracts/token/KRC223.sol:KRC223\":{\"bin-runtime\":\"\",\"srcmap-runtime\":\"\"},\"../../truffle/contracts/utils/NameHash.sol:NameHash\":{\"bin-runtime\":\"7300000000000000000000000000000000000000003014608060405260043610610058576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063098799621461005d575b600080fd5b6100b7600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506100d5565b60405180826000191660001916815260200191505060405180910390f35b60006100df610599565b60006100e9610599565b606060006100f6876102c3565b945060006001029350610108856102f1565b15156102b65761014c6040805190810160405280600181526020017f2e000000000000000000000000000000000000000000000000000000000000008152506102c3565b92506001610163848761030190919063ffffffff16565b0160405190808252806020026020018201604052801561019757816020015b60608152602001906001900390816101825790505b509150600090505b81518110156101eb576101c36101be848761037890919063ffffffff16565b610392565b82828151811015156101d157fe5b90602001906020020181905250808060010191505061019f565b600090505b81518110156102b55783826001838551030381518110151561020e57fe5b906020019060200201516040518082805190602001908083835b60208310151561024d5780518252602082019150602081019050602083039250610228565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206040518083600019166000191681526020018260001916600019168152602001925050506040518091039020935080806001019150506101f0565b5b8395505050505050919050565b6102cb610599565b600060208301905060408051908101604052808451815260200182815250915050919050565b6000808260000151149050919050565b600080826000015161032585600001518660200151866000015187602001516103f4565b0190505b83600001518460200151018111151561037157818060010192505082600001516103698560200151830386600001510383866000015187602001516103f4565b019050610329565b5092915050565b610380610599565b61038b8383836104b0565b5092915050565b606080600083600001516040519080825280601f01601f1916602001820160405280156103ce5781602001602082028038833980820191505090505b5091506020820190506103ea818560200151866000015161054e565b8192505050919050565b6000806000806000888711151561049e576020871115156104555760018760200360080260020a031980875116888b038a018a96505b81838851161461044a5760018701965080600188031061042a578b8b0196505b5050508394506104a4565b8686209150879350600092505b8689038311151561049d57868420905080600019168260001916141561048a578394506104a4565b6001840193508280600101935050610462565b5b88880194505b50505050949350505050565b6104b8610599565b60006104d685600001518660200151866000015187602001516103f4565b90508460200151836020018181525050846020015181038360000181815250508460000151856020015101811415610518576000856000018181525050610543565b8360000151836000015101856000018181510391508181525050836000015181018560200181815250505b829150509392505050565b60005b6020821015156105765782518452602084019350602083019250602082039150610551565b6001826020036101000a0390508019835116818551168181178652505050505050565b6040805190810160405280600081526020016000815250905600a165627a7a7230582061e71ac442a52cdca76773173facd165f217e2a581cbe2462dfb62a4032145d40029\",\"srcmap-runtime\":\"96:961:3:-;;;;;;;;;;;;;;;;;;;;;;;;;;;383:671;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;433:17;466:8;;:::i;:::-;502:16;637:9;;:::i;:::-;676;741:6;477:15;:5;:13;:15::i;:::-;466:26;;521:66;502:85;;;;601:12;:4;:10;:12::i;:::-;600:13;597:426;;;649:13;:11;;;;;;;;;;;;;;;;;;;:13::i;:::-;637:25;;721:1;701:17;712:5;701:4;:10;;:17;;;;:::i;:::-;:21;688:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;676:47;;750:1;741:10;;737:123;757:5;:12;753:1;:16;737:123;;;817:28;:17;828:5;817:4;:10;;:17;;;;:::i;:::-;:26;:28::i;:::-;806:5;812:1;806:8;;;;;;;;;;;;;;;;;:39;;;;771:3;;;;;;;737:123;;;882:1;878:5;;874:139;889:5;:12;885:1;:16;874:139;;;954:8;969:5;994:1;990;975:5;:12;:16;:20;969:27;;;;;;;;;;;;;;;;;;964:33;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;51:19;36:153;;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;964:33:3;;;;;;;;;;;;;;;;949:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;938:60;;903:3;;;;;;;874:139;;;597:426;1039:8;1032:15;;383:671;;;;;;;;:::o;2805:191:4:-;2853:5;;:::i;:::-;2870:8;2928:4;2922;2918:15;2911:22;;2959:30;;;;;;;;;2971:4;2965:18;2959:30;;;;2985:3;2959:30;;;2952:37;;2805:191;;;;:::o;6619:89::-;6664:4;6700:1;6687:4;:9;;;:14;6680:21;;6619:89;;;:::o;22313:349::-;22372:10;22394:8;22463:6;:11;;;22405:55;22413:4;:9;;;22424:4;:9;;;22435:6;:11;;;22448:6;:11;;;22405:7;:55::i;:::-;:69;22394:80;;22484:172;22510:4;:9;;;22498:4;:9;;;:21;22491:3;:28;;22484:172;;;22535:7;;;;;;;22634:6;:11;;;22562:69;22589:4;:9;;;22583:3;:15;22570:4;:9;;;:29;22601:3;22606:6;:11;;;22619:6;:11;;;22562:7;:69::i;:::-;:83;22556:89;;22484:172;;;22313:349;;;;;:::o;20412:115::-;20471:11;;:::i;:::-;20494:26;20500:4;20506:6;20514:5;20494;:26::i;:::-;;20412:115;;;;:::o;5094:236::-;5142:6;5160:7;5201:11;5181:4;:9;;;5170:21;;;;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;5170:21:4;;;;5160:31;;5252:2;5247:3;5243:12;5233:22;;5267:36;5274:6;5282:4;:9;;;5293:4;:9;;;5267:6;:36::i;:::-;5320:3;5313:10;;5094:236;;;;;:::o;14784:1428::-;14878:4;14894:8;14912;15743:12;15939:16;14948:7;14935:9;:20;;14931:1241;;;14988:2;14975:9;:15;;14971:1191;;;15172:1;15158:9;15154:2;15150:18;15147:1;15143:26;15140:1;15136:34;15132:42;15128:47;15236:4;15224:9;15218:16;15214:27;15299:9;15290:7;15286:23;15277:7;15273:37;15338:7;15331:14;;15366:4;15430:10;15423:4;15417:3;15411:10;15407:21;15404:37;15398:4;15392:50;15479:1;15474:3;15470:11;15463:18;;15530:3;15526:1;15521:3;15517:11;15514:20;15508:4;15502:33;15576:7;15567;15563:21;15556:28;;15605:4;15094:534;;;15652:3;15645:10;;;;14971:1191;15808:9;15797;15792:26;15784:34;;15843:7;15837:13;;15879:1;15873:7;;15868:280;15899:9;15889:7;:19;15882:3;:26;;15868:280;;;16010:9;16005:3;16000:20;15988:32;;16055:8;16047:16;;;:4;:16;;;;16043:56;;;16096:3;16089:10;;;;16043:56;16128:1;16121:8;;;;15910:5;;;;;;;15868:280;;;14931:1241;16198:7;16188;:17;16181:24;;14784:1428;;;;;;;;;;;:::o;19470:471::-;19542:5;;:::i;:::-;19559:8;19570:55;19578:4;:9;;;19589:4;:9;;;19600:6;:11;;;19613:6;:11;;;19570:7;:55::i;:::-;19559:66;;19648:4;:9;;;19635:5;:10;;:22;;;;;19686:4;:9;;;19680:3;:15;19667:5;:10;;:28;;;;;19728:4;:9;;;19716:4;:9;;;:21;19709:3;:28;19705:208;;;19790:1;19778:4;:9;;:13;;;;;19705:208;;;19848:6;:11;;;19835:5;:10;;;:24;19822:4;:9;;:37;;;;;;;;;;;19891:6;:11;;;19885:3;:17;19873:4;:9;;:29;;;;;19705:208;19929:5;19922:12;;19470:471;;;;;;:::o;2062:543::-;2383:9;2177:164;2190:2;2183:3;:9;;2177:164;;;2265:3;2259:10;2253:4;2246:24;2305:2;2297:10;;;;2328:2;2321:9;;;;2201:2;2194:9;;;;2177:164;;;2415:1;2408:3;2403:2;:8;2395:3;:17;:21;2383:33;;2484:4;2480:9;2474:3;2468:10;2464:26;2536:4;2529;2523:11;2519:22;2580:7;2570:8;2567:21;2561:4;2554:35;2435:164;;;;;;:::o;96:961:3:-;;;;;;;;;;;;;;;;;;;;:::o\"},\"../../truffle/contracts/utils/Strings.sol:strings\":{\"bin-runtime\":\"73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a7230582044f3711e4cea086562279753fac2f2121275ca01bf807c67a9f50e69bc4b685b0029\",\"srcmap-runtime\":\"1976:22708:4:-;;;;;;;;\"},\"../../truffle/node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol:Pausable\":{\"bin-runtime\":\"608060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680633f4ba83a1461007d5780635c975abb14610094578063715018a6146100c35780638456cb59146100da5780638da5cb5b146100f1578063f2fde38b14610148575b600080fd5b34801561008957600080fd5b5061009261018b565b005b3480156100a057600080fd5b506100a9610249565b604051808215151515815260200191505060405180910390f35b3480156100cf57600080fd5b506100d861025c565b005b3480156100e657600080fd5b506100ef61035e565b005b3480156100fd57600080fd5b5061010661041e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561015457600080fd5b50610189600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610443565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156101e657600080fd5b600060149054906101000a900460ff16151561020157600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600060149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156102b757600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156103b957600080fd5b600060149054906101000a900460ff161515156103d557600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561049e57600080fd5b6104a7816104aa565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156104e657600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a7230582039114e0801ae539abe5c8d1cb7173cc759653f683c7c15bd34a2fec34fcfac280029\",\"srcmap-runtime\":\"177:755:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;838:92;;8:9:-1;5:2;;;30:1;27;20:12;5:2;838:92:5;;;;;;247:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;247:26:5;;;;;;;;;;;;;;;;;;;;;;;;;;;1001:111:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1001:111:6;;;;;;666:90:5;;8:9:-1;5:2;;;30:1;27;20:12;5:2;666:90:5;;;;;;238:20:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;238:20:6;;;;;;;;;;;;;;;;;;;;;;;;;;;1274:103;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1274:103:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;838:92:5;719:5:6;;;;;;;;;;;705:19;;:10;:19;;;697:28;;;;;;;;568:6:5;;;;;;;;;;;560:15;;;;;;;;900:5;891:6;;:14;;;;;;;;;;;;;;;;;;916:9;;;;;;;;;;838:92::o;247:26::-;;;;;;;;;;;;;:::o;1001:111:6:-;719:5;;;;;;;;;;;705:19;;:10;:19;;;697:28;;;;;;;;1077:5;;;;;;;;;;;1058:25;;;;;;;;;;;;1105:1;1089:5;;:18;;;;;;;;;;;;;;;;;;1001:111::o;666:90:5:-;719:5:6;;;;;;;;;;;705:19;;:10;:19;;;697:28;;;;;;;;416:6:5;;;;;;;;;;;415:7;407:16;;;;;;;;729:4;720:6;;:13;;;;;;;;;;;;;;;;;;744:7;;;;;;;;;;666:90::o;238:20:6:-;;;;;;;;;;;;;:::o;1274:103::-;719:5;;;;;;;;;;;705:19;;:10;:19;;;697:28;;;;;;;;1343:29;1362:9;1343:18;:29::i;:::-;1274:103;:::o;1512:171::-;1603:1;1582:23;;:9;:23;;;;1574:32;;;;;;;;1645:9;1617:38;;1638:5;;;;;;;;;;;1617:38;;;;;;;;;;;;1669:9;1661:5;;:17;;;;;;;;;;;;;;;;;;1512:171;:::o\"},\"../../truffle/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol:Ownable\":{\"bin-runtime\":\"608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063715018a61461005c5780638da5cb5b14610073578063f2fde38b146100ca575b600080fd5b34801561006857600080fd5b5061007161010d565b005b34801561007f57600080fd5b5061008861020f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156100d657600080fd5b5061010b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610234565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561016857600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561028f57600080fd5b6102988161029b565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156102d757600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505600a165627a7a72305820c24c05a88cd66f6ee361668b203bafe048c982176ba6b6a942bdcebf563468940029\",\"srcmap-runtime\":\"217:1468:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1001:111;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1001:111:6;;;;;;238:20;;8:9:-1;5:2;;;30:1;27;20:12;5:2;238:20:6;;;;;;;;;;;;;;;;;;;;;;;;;;;1274:103;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1274:103:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;1001:111;719:5;;;;;;;;;;;705:19;;:10;:19;;;697:28;;;;;;;;1077:5;;;;;;;;;;;1058:25;;;;;;;;;;;;1105:1;1089:5;;:18;;;;;;;;;;;;;;;;;;1001:111::o;238:20::-;;;;;;;;;;;;;:::o;1274:103::-;719:5;;;;;;;;;;;705:19;;:10;:19;;;697:28;;;;;;;;1343:29;1362:9;1343:18;:29::i;:::-;1274:103;:::o;1512:171::-;1603:1;1582:23;;:9;:23;;;;1574:32;;;;;;;;1645:9;1617:38;;1638:5;;;;;;;;;;;1617:38;;;;;;;;;;;;1669:9;1661:5;;:17;;;;;;;;;;;;;;;;;;1512:171;:::o\"},\"../../truffle/node_modules/zos-lib/contracts/migrations/Initializable.sol:Initializable\":{\"bin-runtime\":\"608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063158ef93e146044575b600080fd5b348015604f57600080fd5b5060566070565b604051808215151515815260200191505060405180910390f35b6000809054906101000a900460ff16815600a165627a7a72305820e719bcb6af3b80295b5acabaf1088db5f16d0d12a86afc144c0e300a7a5537740029\",\"srcmap-runtime\":\"464:350:7:-;;;;;;;;;;;;;;;;;;;;;;;;562:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;562:23:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o\"}},\"sourceList\":[\"../../truffle/contracts/consensus/mgr/ValidatorMgr.sol\",\"../../truffle/contracts/kns/DomainResolver.sol\",\"../../truffle/contracts/token/KRC223.sol\",\"../../truffle/contracts/utils/NameHash.sol\",\"../../truffle/contracts/utils/Strings.sol\",\"../../truffle/node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\",\"../../truffle/node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\",\"../../truffle/node_modules/zos-lib/contracts/migrations/Initializable.sol\"],\"version\":\"0.4.24+commit.e67f0147.Linux.g++\"}"

// ValidatorMgrBin is the compiled bytecode used for deploying new contracts.
const ValidatorMgrBin = `608060405260008060146101000a81548160ff02191690831515021790555034801561002a57600080fd5b5060405160a0806120b28339810180604052810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000841115156100c457600080fd5b84600181905550836002819055506201518083026003819055508160068190555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550733b058a1a62e59d185618f64bebbaf3c52bf099e063098799626040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260128152602001807f6d696e696e67746f6b656e2e6b6f77616c61000000000000000000000000000081525060200191505060206040518083038186803b1580156101c257600080fd5b505af41580156101d6573d6000803e3d6000fd5b505050506040513d60208110156101ec57600080fd5b8101908080519060200190929190505050600581600019169055505050505050611e978061021b6000396000f30060806040526004361061016a576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063035cf1421461016f5780630a3cb6631461019a578063158ef93e146101c55780632086ca25146101f4578063268331481461021f5780633ed0a3731461024a5780633f4ba83a146102925780635c975abb146102a957806369474625146102d85780636a911ccf146103035780637071688a1461031a578063715018a6146103455780637d0e81bf1461035c5780638456cb59146103b75780638da5cb5b146103ce5780639363a1411461042557806397584b3e146104505780639abee7d01461047f5780639bb2ea5a146104cc578063a2207c6a146104f9578063aded41ec14610550578063b774cb1e14610567578063c22a933c1461059a578063ccd65296146105c7578063cefddda914610632578063e7a60a9c1461068d578063f2fde38b14610701578063facd743b14610744575b600080fd5b34801561017b57600080fd5b5061018461079f565b6040518082815260200191505060405180910390f35b3480156101a657600080fd5b506101af610872565b6040518082815260200191505060405180910390f35b3480156101d157600080fd5b506101da610878565b604051808215151515815260200191505060405180910390f35b34801561020057600080fd5b5061020961088b565b6040518082815260200191505060405180910390f35b34801561022b57600080fd5b50610234610891565b6040518082815260200191505060405180910390f35b34801561025657600080fd5b5061027560048036038101908080359060200190929190505050610897565b604051808381526020018281526020019250505060405180910390f35b34801561029e57600080fd5b506102a761090f565b005b3480156102b557600080fd5b506102be6109cd565b604051808215151515815260200191505060405180910390f35b3480156102e457600080fd5b506102ed6109e0565b6040518082815260200191505060405180910390f35b34801561030f57600080fd5b506103186109e6565b005b34801561032657600080fd5b5061032f610a21565b6040518082815260200191505060405180910390f35b34801561035157600080fd5b5061035a610a2e565b005b34801561036857600080fd5b5061039d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b30565b604051808215151515815260200191505060405180910390f35b3480156103c357600080fd5b506103cc610bc4565b005b3480156103da57600080fd5b506103e3610c84565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043157600080fd5b5061043a610ca9565b6040518082815260200191505060405180910390f35b34801561045c57600080fd5b50610465610cf6565b604051808215151515815260200191505060405180910390f35b34801561048b57600080fd5b506104ca600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d09565b005b3480156104d857600080fd5b506104f760048036038101908080359060200190929190505050610d96565b005b34801561050557600080fd5b5061050e610e3a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561055c57600080fd5b50610565610e60565b005b34801561057357600080fd5b5061057c611135565b60405180826000191660001916815260200191505060405180910390f35b3480156105a657600080fd5b506105c56004803603810190808035906020019092919050505061113b565b005b3480156105d357600080fd5b5061063060048036038101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111a0565b005b34801561063e57600080fd5b50610673600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506113bf565b604051808215151515815260200191505060405180910390f35b34801561069957600080fd5b506106b860048036038101908080359060200190929190505050611418565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390f35b34801561070d57600080fd5b50610742600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114cf565b005b34801561075057600080fd5b50610785600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611536565b604051808215151515815260200191505060405180910390f35b6000806107aa610cf6565b156107b957600154915061086e565b6008600060096001600980549050038154811015156107d457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600181600201600183600201805490500381548110151561085857fe5b9060005260206000209060020201600001540191505b5090565b60035481565b600060159054906101000a900460ff1681565b60025481565b60065481565b6000806000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201848154811015156108eb57fe5b90600052602060002090600202019050806000015481600101549250925050915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561096a57600080fd5b600060149054906101000a900460ff16151561098557600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b600060149054906101000a900460ff1681565b60015481565b600060149054906101000a900460ff16151515610a0257600080fd5b610a0b33611536565b1515610a1657600080fd5b610a1f3361158f565b565b6000600980549050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a8957600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482060405160405180910390a260008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080610b3c83611536565b1515610b4b5760009150610bbe565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002019050600654816001838054905003815481101515610ba757fe5b906000526020600020906002020160000154101591505b50919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c1f57600080fd5b600060149054906101000a900460ff16151515610c3b57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020180549050905090565b6000806009805490506002540311905090565b60408051908101604052808373ffffffffffffffffffffffffffffffffffffffff16815260200182815250600a60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155905050610d92611701565b5050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610df457600080fd5b600980549050831015610e2e5782600980549050039150600090505b81811015610e2d57610e206117bf565b8080600101915050610e10565b5b82600281905550505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600060149054906101000a900460ff16151515610e8257600080fd5b6000935060009250600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020191505b818054905083108015610f02575060008284815481101515610eed57fe5b90600052602060002090600202016001015414155b15610f64578183815481101515610f1557fe5b906000526020600020906002020160010154421015610f3357610f64565b8183815481101515610f4157fe5b906000526020600020906002020160000154840193508280600101935050610ecf565b610f6e338461180b565b600084111561112f57600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633b3b57de6005546040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808260001916600019168152602001915050602060405180830381600087803b15801561101257600080fd5b505af1158015611026573d6000803e3d6000fd5b505050506040513d602081101561103c57600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156110f257600080fd5b505af1158015611106573d6000803e3d6000fd5b505050506040513d602081101561111c57600080fd5b8101908080519060200190929190505050505b50505050565b60045481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561119657600080fd5b8060018190555050565b600060159054906101000a900460ff1615151561124b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f436f6e747261637420696e7374616e63652068617320616c726561647920626581526020017f656e20696e697469616c697a656400000000000000000000000000000000000081525060400191505060405180910390fd5b60008411151561125a57600080fd5b84600181905550836002819055506201518083026003819055508160068190555080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550733b058a1a62e59d185618f64bebbaf3c52bf099e063098799626040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825260128152602001807f6d696e696e67746f6b656e2e6b6f77616c61000000000000000000000000000081525060200191505060206040518083038186803b15801561135857600080fd5b505af415801561136c573d6000803e3d6000fd5b505050506040513d602081101561138257600080fd5b8101908080519060200190929190505050600581600019169055506001600060156101000a81548160ff0219169083151502179055505050505050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900460ff169050919050565b600080600060098481548110151561142c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060020160018260020180549050038154811015156114b557fe5b906000526020600020906002020160000154915050915091565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561152a57600080fd5b611533816118f8565b50565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff169050919050565b600080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150816000015490505b60016009805490500381101561168c576009600182018154811015156115fd57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660098281548110151561163757fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080806001019150506115db565b60098054809190600190036116a19190611db9565b5060008260010160006101000a81548160ff02191690831515021790555060035442018260020160018460020180549050038154811015156116df57fe5b9060005260206000209060020201600101819055506116fc6119f2565b505050565b600060149054906101000a900460ff1615151561171d57600080fd5b61174b600a60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611536565b15151561175757600080fd5b61175f61079f565b600a600101541015151561177257600080fd5b61177a610cf6565b1515611789576117886117bf565b5b6117bd600a60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a60010154611a75565b565b61180960096001600980549050038154811015156117d957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661158f565b565b60008060008084141561181d576118f1565b600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209250600091508390505b82600201805490508110156118df57826002018181548110151561188657fe5b906000526020600020906002020183600201838154811015156118a557fe5b9060005260206000209060020201600082015481600001556001820154816001015590505081806001019250508080600101915050611866565b8183600201816118ef9190611de5565b505b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561193457600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6009604051808280548015611a5c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611a12575b5050915050604051809103902060048160001916905550565b600080600080600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209350600160098790806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555003846000018190555060018460010160006101000a81548160ff0219169083151502179055506000431415611b705760018460010160016101000a81548160ff0219169083151502179055505b8360020160408051908101604052808781526020016000815250908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000015560208201518160010155505050836000015492505b6000831115611da95760086000600960018603815481101515611bf357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209150816002016001836002018054905003815481101515611c7557fe5b90600052602060002090600202019050806000015485111515611c9757611da9565b600960018403815481101515611ca957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600984815481101515611ce357fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600960018503815481101515611d3e57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828260000181905550600183038460000181905550828060019003935050611bd4565b611db16119f2565b505050505050565b815481835581811115611de057818360005260206000209182019101611ddf9190611e17565b5b505050565b815481835581811115611e1257600202816002028360005260206000209182019101611e119190611e3c565b5b505050565b611e3991905b80821115611e35576000816000905550600101611e1d565b5090565b90565b611e6891905b80821115611e6457600080820160009055600182016000905550600201611e42565b5090565b905600a165627a7a72305820191fba81bca640eb79ed9424e349e31a1a476c3140d3d27c954efbfec8e60f0b0029`

// DeployValidatorMgr deploys a new Kowala contract, binding an instance of ValidatorMgr to it.
func DeployValidatorMgr(auth *bind.TransactOpts, backend bind.ContractBackend, _baseDeposit *big.Int, _maxNumValidators *big.Int, _freezePeriod *big.Int, _superNodeAmount *big.Int, _resolverAddr common.Address) (common.Address, *types.Transaction, *ValidatorMgr, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorMgrABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ValidatorMgrBin), backend, _baseDeposit, _maxNumValidators, _freezePeriod, _superNodeAmount, _resolverAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ValidatorMgr{ValidatorMgrCaller: ValidatorMgrCaller{contract: contract}, ValidatorMgrTransactor: ValidatorMgrTransactor{contract: contract}, ValidatorMgrFilterer: ValidatorMgrFilterer{contract: contract}}, nil
}

// ValidatorMgr is an auto generated Go binding around a Kowala contract.
type ValidatorMgr struct {
	ValidatorMgrCaller     // Read-only binding to the contract
	ValidatorMgrTransactor // Write-only binding to the contract
	ValidatorMgrFilterer   // Log filterer for contract events
}

// ValidatorMgrCaller is an auto generated read-only Go binding around a Kowala contract.
type ValidatorMgrCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorMgrTransactor is an auto generated write-only Go binding around a Kowala contract.
type ValidatorMgrTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorMgrFilterer is an auto generated log filtering Go binding around a Kowala contract events.
type ValidatorMgrFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValidatorMgrSession is an auto generated Go binding around a Kowala contract,
// with pre-set call and transact options.
type ValidatorMgrSession struct {
	Contract     *ValidatorMgr     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValidatorMgrCallerSession is an auto generated read-only Go binding around a Kowala contract,
// with pre-set call options.
type ValidatorMgrCallerSession struct {
	Contract *ValidatorMgrCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// ValidatorMgrTransactorSession is an auto generated write-only Go binding around a Kowala contract,
// with pre-set transact options.
type ValidatorMgrTransactorSession struct {
	Contract     *ValidatorMgrTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// ValidatorMgrRaw is an auto generated low-level Go binding around a Kowala contract.
type ValidatorMgrRaw struct {
	Contract *ValidatorMgr // Generic contract binding to access the raw methods on
}

// ValidatorMgrCallerRaw is an auto generated low-level read-only Go binding around a Kowala contract.
type ValidatorMgrCallerRaw struct {
	Contract *ValidatorMgrCaller // Generic read-only contract binding to access the raw methods on
}

// ValidatorMgrTransactorRaw is an auto generated low-level write-only Go binding around a Kowala contract.
type ValidatorMgrTransactorRaw struct {
	Contract *ValidatorMgrTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValidatorMgr creates a new instance of ValidatorMgr, bound to a specific deployed contract.
func NewValidatorMgr(address common.Address, backend bind.ContractBackend) (*ValidatorMgr, error) {
	contract, err := bindValidatorMgr(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ValidatorMgr{ValidatorMgrCaller: ValidatorMgrCaller{contract: contract}, ValidatorMgrTransactor: ValidatorMgrTransactor{contract: contract}, ValidatorMgrFilterer: ValidatorMgrFilterer{contract: contract}}, nil
}

// NewValidatorMgrCaller creates a new read-only instance of ValidatorMgr, bound to a specific deployed contract.
func NewValidatorMgrCaller(address common.Address, caller bind.ContractCaller) (*ValidatorMgrCaller, error) {
	contract, err := bindValidatorMgr(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorMgrCaller{contract: contract}, nil
}

// NewValidatorMgrTransactor creates a new write-only instance of ValidatorMgr, bound to a specific deployed contract.
func NewValidatorMgrTransactor(address common.Address, transactor bind.ContractTransactor) (*ValidatorMgrTransactor, error) {
	contract, err := bindValidatorMgr(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValidatorMgrTransactor{contract: contract}, nil
}

// NewValidatorMgrFilterer creates a new log filterer instance of ValidatorMgr, bound to a specific deployed contract.
func NewValidatorMgrFilterer(address common.Address, filterer bind.ContractFilterer) (*ValidatorMgrFilterer, error) {
	contract, err := bindValidatorMgr(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValidatorMgrFilterer{contract: contract}, nil
}

// bindValidatorMgr binds a generic wrapper to an already deployed contract.
func bindValidatorMgr(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValidatorMgrABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorMgr *ValidatorMgrRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ValidatorMgr.Contract.ValidatorMgrCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorMgr *ValidatorMgrRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorMgr.Contract.ValidatorMgrTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorMgr *ValidatorMgrRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorMgr.Contract.ValidatorMgrTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ValidatorMgr *ValidatorMgrCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _ValidatorMgr.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ValidatorMgr *ValidatorMgrTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorMgr.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ValidatorMgr *ValidatorMgrTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ValidatorMgr.Contract.contract.Transact(opts, method, params...)
}

// HasAvailability is a free data retrieval call binding the contract method 0x97584b3e.
//
// Solidity: function _hasAvailability() constant returns(available bool)
func (_ValidatorMgr *ValidatorMgrCaller) HasAvailability(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ValidatorMgr.contract.Call(opts, out, "_hasAvailability")
	return *ret0, err
}

// HasAvailability is a free data retrieval call binding the contract method 0x97584b3e.
//
// Solidity: function _hasAvailability() constant returns(available bool)
func (_ValidatorMgr *ValidatorMgrSession) HasAvailability() (bool, error) {
	return _ValidatorMgr.Contract.HasAvailability(&_ValidatorMgr.CallOpts)
}

// HasAvailability is a free data retrieval call binding the contract method 0x97584b3e.
//
// Solidity: function _hasAvailability() constant returns(available bool)
func (_ValidatorMgr *ValidatorMgrCallerSession) HasAvailability() (bool, error) {
	return _ValidatorMgr.Contract.HasAvailability(&_ValidatorMgr.CallOpts)
}

// BaseDeposit is a free data retrieval call binding the contract method 0x69474625.
//
// Solidity: function baseDeposit() constant returns(uint256)
func (_ValidatorMgr *ValidatorMgrCaller) BaseDeposit(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorMgr.contract.Call(opts, out, "baseDeposit")
	return *ret0, err
}

// BaseDeposit is a free data retrieval call binding the contract method 0x69474625.
//
// Solidity: function baseDeposit() constant returns(uint256)
func (_ValidatorMgr *ValidatorMgrSession) BaseDeposit() (*big.Int, error) {
	return _ValidatorMgr.Contract.BaseDeposit(&_ValidatorMgr.CallOpts)
}

// BaseDeposit is a free data retrieval call binding the contract method 0x69474625.
//
// Solidity: function baseDeposit() constant returns(uint256)
func (_ValidatorMgr *ValidatorMgrCallerSession) BaseDeposit() (*big.Int, error) {
	return _ValidatorMgr.Contract.BaseDeposit(&_ValidatorMgr.CallOpts)
}

// FreezePeriod is a free data retrieval call binding the contract method 0x0a3cb663.
//
// Solidity: function freezePeriod() constant returns(uint256)
func (_ValidatorMgr *ValidatorMgrCaller) FreezePeriod(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorMgr.contract.Call(opts, out, "freezePeriod")
	return *ret0, err
}

// FreezePeriod is a free data retrieval call binding the contract method 0x0a3cb663.
//
// Solidity: function freezePeriod() constant returns(uint256)
func (_ValidatorMgr *ValidatorMgrSession) FreezePeriod() (*big.Int, error) {
	return _ValidatorMgr.Contract.FreezePeriod(&_ValidatorMgr.CallOpts)
}

// FreezePeriod is a free data retrieval call binding the contract method 0x0a3cb663.
//
// Solidity: function freezePeriod() constant returns(uint256)
func (_ValidatorMgr *ValidatorMgrCallerSession) FreezePeriod() (*big.Int, error) {
	return _ValidatorMgr.Contract.FreezePeriod(&_ValidatorMgr.CallOpts)
}

// GetDepositAtIndex is a free data retrieval call binding the contract method 0x3ed0a373.
//
// Solidity: function getDepositAtIndex(index uint256) constant returns(amount uint256, availableAt uint256)
func (_ValidatorMgr *ValidatorMgrCaller) GetDepositAtIndex(opts *bind.CallOpts, index *big.Int) (struct {
	Amount      *big.Int
	AvailableAt *big.Int
}, error) {
	ret := new(struct {
		Amount      *big.Int
		AvailableAt *big.Int
	})
	out := ret
	err := _ValidatorMgr.contract.Call(opts, out, "getDepositAtIndex", index)
	return *ret, err
}

// GetDepositAtIndex is a free data retrieval call binding the contract method 0x3ed0a373.
//
// Solidity: function getDepositAtIndex(index uint256) constant returns(amount uint256, availableAt uint256)
func (_ValidatorMgr *ValidatorMgrSession) GetDepositAtIndex(index *big.Int) (struct {
	Amount      *big.Int
	AvailableAt *big.Int
}, error) {
	return _ValidatorMgr.Contract.GetDepositAtIndex(&_ValidatorMgr.CallOpts, index)
}

// GetDepositAtIndex is a free data retrieval call binding the contract method 0x3ed0a373.
//
// Solidity: function getDepositAtIndex(index uint256) constant returns(amount uint256, availableAt uint256)
func (_ValidatorMgr *ValidatorMgrCallerSession) GetDepositAtIndex(index *big.Int) (struct {
	Amount      *big.Int
	AvailableAt *big.Int
}, error) {
	return _ValidatorMgr.Contract.GetDepositAtIndex(&_ValidatorMgr.CallOpts, index)
}

// GetDepositCount is a free data retrieval call binding the contract method 0x9363a141.
//
// Solidity: function getDepositCount() constant returns(count uint256)
func (_ValidatorMgr *ValidatorMgrCaller) GetDepositCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorMgr.contract.Call(opts, out, "getDepositCount")
	return *ret0, err
}

// GetDepositCount is a free data retrieval call binding the contract method 0x9363a141.
//
// Solidity: function getDepositCount() constant returns(count uint256)
func (_ValidatorMgr *ValidatorMgrSession) GetDepositCount() (*big.Int, error) {
	return _ValidatorMgr.Contract.GetDepositCount(&_ValidatorMgr.CallOpts)
}

// GetDepositCount is a free data retrieval call binding the contract method 0x9363a141.
//
// Solidity: function getDepositCount() constant returns(count uint256)
func (_ValidatorMgr *ValidatorMgrCallerSession) GetDepositCount() (*big.Int, error) {
	return _ValidatorMgr.Contract.GetDepositCount(&_ValidatorMgr.CallOpts)
}

// GetMinimumDeposit is a free data retrieval call binding the contract method 0x035cf142.
//
// Solidity: function getMinimumDeposit() constant returns(deposit uint256)
func (_ValidatorMgr *ValidatorMgrCaller) GetMinimumDeposit(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorMgr.contract.Call(opts, out, "getMinimumDeposit")
	return *ret0, err
}

// GetMinimumDeposit is a free data retrieval call binding the contract method 0x035cf142.
//
// Solidity: function getMinimumDeposit() constant returns(deposit uint256)
func (_ValidatorMgr *ValidatorMgrSession) GetMinimumDeposit() (*big.Int, error) {
	return _ValidatorMgr.Contract.GetMinimumDeposit(&_ValidatorMgr.CallOpts)
}

// GetMinimumDeposit is a free data retrieval call binding the contract method 0x035cf142.
//
// Solidity: function getMinimumDeposit() constant returns(deposit uint256)
func (_ValidatorMgr *ValidatorMgrCallerSession) GetMinimumDeposit() (*big.Int, error) {
	return _ValidatorMgr.Contract.GetMinimumDeposit(&_ValidatorMgr.CallOpts)
}

// GetValidatorAtIndex is a free data retrieval call binding the contract method 0xe7a60a9c.
//
// Solidity: function getValidatorAtIndex(index uint256) constant returns(code address, deposit uint256)
func (_ValidatorMgr *ValidatorMgrCaller) GetValidatorAtIndex(opts *bind.CallOpts, index *big.Int) (struct {
	Code    common.Address
	Deposit *big.Int
}, error) {
	ret := new(struct {
		Code    common.Address
		Deposit *big.Int
	})
	out := ret
	err := _ValidatorMgr.contract.Call(opts, out, "getValidatorAtIndex", index)
	return *ret, err
}

// GetValidatorAtIndex is a free data retrieval call binding the contract method 0xe7a60a9c.
//
// Solidity: function getValidatorAtIndex(index uint256) constant returns(code address, deposit uint256)
func (_ValidatorMgr *ValidatorMgrSession) GetValidatorAtIndex(index *big.Int) (struct {
	Code    common.Address
	Deposit *big.Int
}, error) {
	return _ValidatorMgr.Contract.GetValidatorAtIndex(&_ValidatorMgr.CallOpts, index)
}

// GetValidatorAtIndex is a free data retrieval call binding the contract method 0xe7a60a9c.
//
// Solidity: function getValidatorAtIndex(index uint256) constant returns(code address, deposit uint256)
func (_ValidatorMgr *ValidatorMgrCallerSession) GetValidatorAtIndex(index *big.Int) (struct {
	Code    common.Address
	Deposit *big.Int
}, error) {
	return _ValidatorMgr.Contract.GetValidatorAtIndex(&_ValidatorMgr.CallOpts, index)
}

// GetValidatorCount is a free data retrieval call binding the contract method 0x7071688a.
//
// Solidity: function getValidatorCount() constant returns(count uint256)
func (_ValidatorMgr *ValidatorMgrCaller) GetValidatorCount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorMgr.contract.Call(opts, out, "getValidatorCount")
	return *ret0, err
}

// GetValidatorCount is a free data retrieval call binding the contract method 0x7071688a.
//
// Solidity: function getValidatorCount() constant returns(count uint256)
func (_ValidatorMgr *ValidatorMgrSession) GetValidatorCount() (*big.Int, error) {
	return _ValidatorMgr.Contract.GetValidatorCount(&_ValidatorMgr.CallOpts)
}

// GetValidatorCount is a free data retrieval call binding the contract method 0x7071688a.
//
// Solidity: function getValidatorCount() constant returns(count uint256)
func (_ValidatorMgr *ValidatorMgrCallerSession) GetValidatorCount() (*big.Int, error) {
	return _ValidatorMgr.Contract.GetValidatorCount(&_ValidatorMgr.CallOpts)
}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() constant returns(bool)
func (_ValidatorMgr *ValidatorMgrCaller) Initialized(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ValidatorMgr.contract.Call(opts, out, "initialized")
	return *ret0, err
}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() constant returns(bool)
func (_ValidatorMgr *ValidatorMgrSession) Initialized() (bool, error) {
	return _ValidatorMgr.Contract.Initialized(&_ValidatorMgr.CallOpts)
}

// Initialized is a free data retrieval call binding the contract method 0x158ef93e.
//
// Solidity: function initialized() constant returns(bool)
func (_ValidatorMgr *ValidatorMgrCallerSession) Initialized() (bool, error) {
	return _ValidatorMgr.Contract.Initialized(&_ValidatorMgr.CallOpts)
}

// IsGenesisValidator is a free data retrieval call binding the contract method 0xcefddda9.
//
// Solidity: function isGenesisValidator(code address) constant returns(isIndeed bool)
func (_ValidatorMgr *ValidatorMgrCaller) IsGenesisValidator(opts *bind.CallOpts, code common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ValidatorMgr.contract.Call(opts, out, "isGenesisValidator", code)
	return *ret0, err
}

// IsGenesisValidator is a free data retrieval call binding the contract method 0xcefddda9.
//
// Solidity: function isGenesisValidator(code address) constant returns(isIndeed bool)
func (_ValidatorMgr *ValidatorMgrSession) IsGenesisValidator(code common.Address) (bool, error) {
	return _ValidatorMgr.Contract.IsGenesisValidator(&_ValidatorMgr.CallOpts, code)
}

// IsGenesisValidator is a free data retrieval call binding the contract method 0xcefddda9.
//
// Solidity: function isGenesisValidator(code address) constant returns(isIndeed bool)
func (_ValidatorMgr *ValidatorMgrCallerSession) IsGenesisValidator(code common.Address) (bool, error) {
	return _ValidatorMgr.Contract.IsGenesisValidator(&_ValidatorMgr.CallOpts, code)
}

// IsSuperNode is a free data retrieval call binding the contract method 0x7d0e81bf.
//
// Solidity: function isSuperNode(code address) constant returns(isIndeed bool)
func (_ValidatorMgr *ValidatorMgrCaller) IsSuperNode(opts *bind.CallOpts, code common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ValidatorMgr.contract.Call(opts, out, "isSuperNode", code)
	return *ret0, err
}

// IsSuperNode is a free data retrieval call binding the contract method 0x7d0e81bf.
//
// Solidity: function isSuperNode(code address) constant returns(isIndeed bool)
func (_ValidatorMgr *ValidatorMgrSession) IsSuperNode(code common.Address) (bool, error) {
	return _ValidatorMgr.Contract.IsSuperNode(&_ValidatorMgr.CallOpts, code)
}

// IsSuperNode is a free data retrieval call binding the contract method 0x7d0e81bf.
//
// Solidity: function isSuperNode(code address) constant returns(isIndeed bool)
func (_ValidatorMgr *ValidatorMgrCallerSession) IsSuperNode(code common.Address) (bool, error) {
	return _ValidatorMgr.Contract.IsSuperNode(&_ValidatorMgr.CallOpts, code)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(code address) constant returns(isIndeed bool)
func (_ValidatorMgr *ValidatorMgrCaller) IsValidator(opts *bind.CallOpts, code common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ValidatorMgr.contract.Call(opts, out, "isValidator", code)
	return *ret0, err
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(code address) constant returns(isIndeed bool)
func (_ValidatorMgr *ValidatorMgrSession) IsValidator(code common.Address) (bool, error) {
	return _ValidatorMgr.Contract.IsValidator(&_ValidatorMgr.CallOpts, code)
}

// IsValidator is a free data retrieval call binding the contract method 0xfacd743b.
//
// Solidity: function isValidator(code address) constant returns(isIndeed bool)
func (_ValidatorMgr *ValidatorMgrCallerSession) IsValidator(code common.Address) (bool, error) {
	return _ValidatorMgr.Contract.IsValidator(&_ValidatorMgr.CallOpts, code)
}

// KnsResolver is a free data retrieval call binding the contract method 0xa2207c6a.
//
// Solidity: function knsResolver() constant returns(address)
func (_ValidatorMgr *ValidatorMgrCaller) KnsResolver(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ValidatorMgr.contract.Call(opts, out, "knsResolver")
	return *ret0, err
}

// KnsResolver is a free data retrieval call binding the contract method 0xa2207c6a.
//
// Solidity: function knsResolver() constant returns(address)
func (_ValidatorMgr *ValidatorMgrSession) KnsResolver() (common.Address, error) {
	return _ValidatorMgr.Contract.KnsResolver(&_ValidatorMgr.CallOpts)
}

// KnsResolver is a free data retrieval call binding the contract method 0xa2207c6a.
//
// Solidity: function knsResolver() constant returns(address)
func (_ValidatorMgr *ValidatorMgrCallerSession) KnsResolver() (common.Address, error) {
	return _ValidatorMgr.Contract.KnsResolver(&_ValidatorMgr.CallOpts)
}

// MaxNumValidators is a free data retrieval call binding the contract method 0x2086ca25.
//
// Solidity: function maxNumValidators() constant returns(uint256)
func (_ValidatorMgr *ValidatorMgrCaller) MaxNumValidators(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorMgr.contract.Call(opts, out, "maxNumValidators")
	return *ret0, err
}

// MaxNumValidators is a free data retrieval call binding the contract method 0x2086ca25.
//
// Solidity: function maxNumValidators() constant returns(uint256)
func (_ValidatorMgr *ValidatorMgrSession) MaxNumValidators() (*big.Int, error) {
	return _ValidatorMgr.Contract.MaxNumValidators(&_ValidatorMgr.CallOpts)
}

// MaxNumValidators is a free data retrieval call binding the contract method 0x2086ca25.
//
// Solidity: function maxNumValidators() constant returns(uint256)
func (_ValidatorMgr *ValidatorMgrCallerSession) MaxNumValidators() (*big.Int, error) {
	return _ValidatorMgr.Contract.MaxNumValidators(&_ValidatorMgr.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ValidatorMgr *ValidatorMgrCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _ValidatorMgr.contract.Call(opts, out, "owner")
	return *ret0, err
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ValidatorMgr *ValidatorMgrSession) Owner() (common.Address, error) {
	return _ValidatorMgr.Contract.Owner(&_ValidatorMgr.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() constant returns(address)
func (_ValidatorMgr *ValidatorMgrCallerSession) Owner() (common.Address, error) {
	return _ValidatorMgr.Contract.Owner(&_ValidatorMgr.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_ValidatorMgr *ValidatorMgrCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _ValidatorMgr.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_ValidatorMgr *ValidatorMgrSession) Paused() (bool, error) {
	return _ValidatorMgr.Contract.Paused(&_ValidatorMgr.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_ValidatorMgr *ValidatorMgrCallerSession) Paused() (bool, error) {
	return _ValidatorMgr.Contract.Paused(&_ValidatorMgr.CallOpts)
}

// SuperNodeAmount is a free data retrieval call binding the contract method 0x26833148.
//
// Solidity: function superNodeAmount() constant returns(uint256)
func (_ValidatorMgr *ValidatorMgrCaller) SuperNodeAmount(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _ValidatorMgr.contract.Call(opts, out, "superNodeAmount")
	return *ret0, err
}

// SuperNodeAmount is a free data retrieval call binding the contract method 0x26833148.
//
// Solidity: function superNodeAmount() constant returns(uint256)
func (_ValidatorMgr *ValidatorMgrSession) SuperNodeAmount() (*big.Int, error) {
	return _ValidatorMgr.Contract.SuperNodeAmount(&_ValidatorMgr.CallOpts)
}

// SuperNodeAmount is a free data retrieval call binding the contract method 0x26833148.
//
// Solidity: function superNodeAmount() constant returns(uint256)
func (_ValidatorMgr *ValidatorMgrCallerSession) SuperNodeAmount() (*big.Int, error) {
	return _ValidatorMgr.Contract.SuperNodeAmount(&_ValidatorMgr.CallOpts)
}

// ValidatorsChecksum is a free data retrieval call binding the contract method 0xb774cb1e.
//
// Solidity: function validatorsChecksum() constant returns(bytes32)
func (_ValidatorMgr *ValidatorMgrCaller) ValidatorsChecksum(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _ValidatorMgr.contract.Call(opts, out, "validatorsChecksum")
	return *ret0, err
}

// ValidatorsChecksum is a free data retrieval call binding the contract method 0xb774cb1e.
//
// Solidity: function validatorsChecksum() constant returns(bytes32)
func (_ValidatorMgr *ValidatorMgrSession) ValidatorsChecksum() ([32]byte, error) {
	return _ValidatorMgr.Contract.ValidatorsChecksum(&_ValidatorMgr.CallOpts)
}

// ValidatorsChecksum is a free data retrieval call binding the contract method 0xb774cb1e.
//
// Solidity: function validatorsChecksum() constant returns(bytes32)
func (_ValidatorMgr *ValidatorMgrCallerSession) ValidatorsChecksum() ([32]byte, error) {
	return _ValidatorMgr.Contract.ValidatorsChecksum(&_ValidatorMgr.CallOpts)
}

// DeregisterValidator is a paid mutator transaction binding the contract method 0x6a911ccf.
//
// Solidity: function deregisterValidator() returns()
func (_ValidatorMgr *ValidatorMgrTransactor) DeregisterValidator(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorMgr.contract.Transact(opts, "deregisterValidator")
}

// DeregisterValidator is a paid mutator transaction binding the contract method 0x6a911ccf.
//
// Solidity: function deregisterValidator() returns()
func (_ValidatorMgr *ValidatorMgrSession) DeregisterValidator() (*types.Transaction, error) {
	return _ValidatorMgr.Contract.DeregisterValidator(&_ValidatorMgr.TransactOpts)
}

// DeregisterValidator is a paid mutator transaction binding the contract method 0x6a911ccf.
//
// Solidity: function deregisterValidator() returns()
func (_ValidatorMgr *ValidatorMgrTransactorSession) DeregisterValidator() (*types.Transaction, error) {
	return _ValidatorMgr.Contract.DeregisterValidator(&_ValidatorMgr.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xccd65296.
//
// Solidity: function initialize(_baseDeposit uint256, _maxNumValidators uint256, _freezePeriod uint256, _superNodeAmount uint256, _resolverAddr address) returns()
func (_ValidatorMgr *ValidatorMgrTransactor) Initialize(opts *bind.TransactOpts, _baseDeposit *big.Int, _maxNumValidators *big.Int, _freezePeriod *big.Int, _superNodeAmount *big.Int, _resolverAddr common.Address) (*types.Transaction, error) {
	return _ValidatorMgr.contract.Transact(opts, "initialize", _baseDeposit, _maxNumValidators, _freezePeriod, _superNodeAmount, _resolverAddr)
}

// Initialize is a paid mutator transaction binding the contract method 0xccd65296.
//
// Solidity: function initialize(_baseDeposit uint256, _maxNumValidators uint256, _freezePeriod uint256, _superNodeAmount uint256, _resolverAddr address) returns()
func (_ValidatorMgr *ValidatorMgrSession) Initialize(_baseDeposit *big.Int, _maxNumValidators *big.Int, _freezePeriod *big.Int, _superNodeAmount *big.Int, _resolverAddr common.Address) (*types.Transaction, error) {
	return _ValidatorMgr.Contract.Initialize(&_ValidatorMgr.TransactOpts, _baseDeposit, _maxNumValidators, _freezePeriod, _superNodeAmount, _resolverAddr)
}

// Initialize is a paid mutator transaction binding the contract method 0xccd65296.
//
// Solidity: function initialize(_baseDeposit uint256, _maxNumValidators uint256, _freezePeriod uint256, _superNodeAmount uint256, _resolverAddr address) returns()
func (_ValidatorMgr *ValidatorMgrTransactorSession) Initialize(_baseDeposit *big.Int, _maxNumValidators *big.Int, _freezePeriod *big.Int, _superNodeAmount *big.Int, _resolverAddr common.Address) (*types.Transaction, error) {
	return _ValidatorMgr.Contract.Initialize(&_ValidatorMgr.TransactOpts, _baseDeposit, _maxNumValidators, _freezePeriod, _superNodeAmount, _resolverAddr)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ValidatorMgr *ValidatorMgrTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorMgr.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ValidatorMgr *ValidatorMgrSession) Pause() (*types.Transaction, error) {
	return _ValidatorMgr.Contract.Pause(&_ValidatorMgr.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ValidatorMgr *ValidatorMgrTransactorSession) Pause() (*types.Transaction, error) {
	return _ValidatorMgr.Contract.Pause(&_ValidatorMgr.TransactOpts)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x9abee7d0.
//
// Solidity: function registerValidator(_from address, _value uint256) returns()
func (_ValidatorMgr *ValidatorMgrTransactor) RegisterValidator(opts *bind.TransactOpts, _from common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ValidatorMgr.contract.Transact(opts, "registerValidator", _from, _value)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x9abee7d0.
//
// Solidity: function registerValidator(_from address, _value uint256) returns()
func (_ValidatorMgr *ValidatorMgrSession) RegisterValidator(_from common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ValidatorMgr.Contract.RegisterValidator(&_ValidatorMgr.TransactOpts, _from, _value)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x9abee7d0.
//
// Solidity: function registerValidator(_from address, _value uint256) returns()
func (_ValidatorMgr *ValidatorMgrTransactorSession) RegisterValidator(_from common.Address, _value *big.Int) (*types.Transaction, error) {
	return _ValidatorMgr.Contract.RegisterValidator(&_ValidatorMgr.TransactOpts, _from, _value)
}

// ReleaseDeposits is a paid mutator transaction binding the contract method 0xaded41ec.
//
// Solidity: function releaseDeposits() returns()
func (_ValidatorMgr *ValidatorMgrTransactor) ReleaseDeposits(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorMgr.contract.Transact(opts, "releaseDeposits")
}

// ReleaseDeposits is a paid mutator transaction binding the contract method 0xaded41ec.
//
// Solidity: function releaseDeposits() returns()
func (_ValidatorMgr *ValidatorMgrSession) ReleaseDeposits() (*types.Transaction, error) {
	return _ValidatorMgr.Contract.ReleaseDeposits(&_ValidatorMgr.TransactOpts)
}

// ReleaseDeposits is a paid mutator transaction binding the contract method 0xaded41ec.
//
// Solidity: function releaseDeposits() returns()
func (_ValidatorMgr *ValidatorMgrTransactorSession) ReleaseDeposits() (*types.Transaction, error) {
	return _ValidatorMgr.Contract.ReleaseDeposits(&_ValidatorMgr.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorMgr *ValidatorMgrTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorMgr.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorMgr *ValidatorMgrSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorMgr.Contract.RenounceOwnership(&_ValidatorMgr.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ValidatorMgr *ValidatorMgrTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ValidatorMgr.Contract.RenounceOwnership(&_ValidatorMgr.TransactOpts)
}

// SetBaseDeposit is a paid mutator transaction binding the contract method 0xc22a933c.
//
// Solidity: function setBaseDeposit(deposit uint256) returns()
func (_ValidatorMgr *ValidatorMgrTransactor) SetBaseDeposit(opts *bind.TransactOpts, deposit *big.Int) (*types.Transaction, error) {
	return _ValidatorMgr.contract.Transact(opts, "setBaseDeposit", deposit)
}

// SetBaseDeposit is a paid mutator transaction binding the contract method 0xc22a933c.
//
// Solidity: function setBaseDeposit(deposit uint256) returns()
func (_ValidatorMgr *ValidatorMgrSession) SetBaseDeposit(deposit *big.Int) (*types.Transaction, error) {
	return _ValidatorMgr.Contract.SetBaseDeposit(&_ValidatorMgr.TransactOpts, deposit)
}

// SetBaseDeposit is a paid mutator transaction binding the contract method 0xc22a933c.
//
// Solidity: function setBaseDeposit(deposit uint256) returns()
func (_ValidatorMgr *ValidatorMgrTransactorSession) SetBaseDeposit(deposit *big.Int) (*types.Transaction, error) {
	return _ValidatorMgr.Contract.SetBaseDeposit(&_ValidatorMgr.TransactOpts, deposit)
}

// SetMaxValidators is a paid mutator transaction binding the contract method 0x9bb2ea5a.
//
// Solidity: function setMaxValidators(max uint256) returns()
func (_ValidatorMgr *ValidatorMgrTransactor) SetMaxValidators(opts *bind.TransactOpts, max *big.Int) (*types.Transaction, error) {
	return _ValidatorMgr.contract.Transact(opts, "setMaxValidators", max)
}

// SetMaxValidators is a paid mutator transaction binding the contract method 0x9bb2ea5a.
//
// Solidity: function setMaxValidators(max uint256) returns()
func (_ValidatorMgr *ValidatorMgrSession) SetMaxValidators(max *big.Int) (*types.Transaction, error) {
	return _ValidatorMgr.Contract.SetMaxValidators(&_ValidatorMgr.TransactOpts, max)
}

// SetMaxValidators is a paid mutator transaction binding the contract method 0x9bb2ea5a.
//
// Solidity: function setMaxValidators(max uint256) returns()
func (_ValidatorMgr *ValidatorMgrTransactorSession) SetMaxValidators(max *big.Int) (*types.Transaction, error) {
	return _ValidatorMgr.Contract.SetMaxValidators(&_ValidatorMgr.TransactOpts, max)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_ValidatorMgr *ValidatorMgrTransactor) TransferOwnership(opts *bind.TransactOpts, _newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorMgr.contract.Transact(opts, "transferOwnership", _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_ValidatorMgr *ValidatorMgrSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorMgr.Contract.TransferOwnership(&_ValidatorMgr.TransactOpts, _newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(_newOwner address) returns()
func (_ValidatorMgr *ValidatorMgrTransactorSession) TransferOwnership(_newOwner common.Address) (*types.Transaction, error) {
	return _ValidatorMgr.Contract.TransferOwnership(&_ValidatorMgr.TransactOpts, _newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ValidatorMgr *ValidatorMgrTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ValidatorMgr.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ValidatorMgr *ValidatorMgrSession) Unpause() (*types.Transaction, error) {
	return _ValidatorMgr.Contract.Unpause(&_ValidatorMgr.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ValidatorMgr *ValidatorMgrTransactorSession) Unpause() (*types.Transaction, error) {
	return _ValidatorMgr.Contract.Unpause(&_ValidatorMgr.TransactOpts)
}

// ValidatorMgrOwnershipRenouncedIterator is returned from FilterOwnershipRenounced and is used to iterate over the raw logs and unpacked data for OwnershipRenounced events raised by the ValidatorMgr contract.
type ValidatorMgrOwnershipRenouncedIterator struct {
	Event *ValidatorMgrOwnershipRenounced // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  kowala.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorMgrOwnershipRenouncedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorMgrOwnershipRenounced)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorMgrOwnershipRenounced)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorMgrOwnershipRenouncedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorMgrOwnershipRenouncedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorMgrOwnershipRenounced represents a OwnershipRenounced event raised by the ValidatorMgr contract.
type ValidatorMgrOwnershipRenounced struct {
	PreviousOwner common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipRenounced is a free log retrieval operation binding the contract event 0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820.
//
// Solidity: e OwnershipRenounced(previousOwner indexed address)
func (_ValidatorMgr *ValidatorMgrFilterer) FilterOwnershipRenounced(opts *bind.FilterOpts, previousOwner []common.Address) (*ValidatorMgrOwnershipRenouncedIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}

	logs, sub, err := _ValidatorMgr.contract.FilterLogs(opts, "OwnershipRenounced", previousOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorMgrOwnershipRenouncedIterator{contract: _ValidatorMgr.contract, event: "OwnershipRenounced", logs: logs, sub: sub}, nil
}

// WatchOwnershipRenounced is a free log subscription operation binding the contract event 0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820.
//
// Solidity: e OwnershipRenounced(previousOwner indexed address)
func (_ValidatorMgr *ValidatorMgrFilterer) WatchOwnershipRenounced(opts *bind.WatchOpts, sink chan<- *ValidatorMgrOwnershipRenounced, previousOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}

	logs, sub, err := _ValidatorMgr.contract.WatchLogs(opts, "OwnershipRenounced", previousOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorMgrOwnershipRenounced)
				if err := _ValidatorMgr.contract.UnpackLog(event, "OwnershipRenounced", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ValidatorMgrOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ValidatorMgr contract.
type ValidatorMgrOwnershipTransferredIterator struct {
	Event *ValidatorMgrOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  kowala.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorMgrOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorMgrOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorMgrOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorMgrOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorMgrOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorMgrOwnershipTransferred represents a OwnershipTransferred event raised by the ValidatorMgr contract.
type ValidatorMgrOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: e OwnershipTransferred(previousOwner indexed address, newOwner indexed address)
func (_ValidatorMgr *ValidatorMgrFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ValidatorMgrOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorMgr.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ValidatorMgrOwnershipTransferredIterator{contract: _ValidatorMgr.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: e OwnershipTransferred(previousOwner indexed address, newOwner indexed address)
func (_ValidatorMgr *ValidatorMgrFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ValidatorMgrOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ValidatorMgr.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorMgrOwnershipTransferred)
				if err := _ValidatorMgr.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ValidatorMgrPauseIterator is returned from FilterPause and is used to iterate over the raw logs and unpacked data for Pause events raised by the ValidatorMgr contract.
type ValidatorMgrPauseIterator struct {
	Event *ValidatorMgrPause // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  kowala.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorMgrPauseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorMgrPause)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorMgrPause)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorMgrPauseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorMgrPauseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorMgrPause represents a Pause event raised by the ValidatorMgr contract.
type ValidatorMgrPause struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterPause is a free log retrieval operation binding the contract event 0x6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625.
//
// Solidity: e Pause()
func (_ValidatorMgr *ValidatorMgrFilterer) FilterPause(opts *bind.FilterOpts) (*ValidatorMgrPauseIterator, error) {

	logs, sub, err := _ValidatorMgr.contract.FilterLogs(opts, "Pause")
	if err != nil {
		return nil, err
	}
	return &ValidatorMgrPauseIterator{contract: _ValidatorMgr.contract, event: "Pause", logs: logs, sub: sub}, nil
}

// WatchPause is a free log subscription operation binding the contract event 0x6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625.
//
// Solidity: e Pause()
func (_ValidatorMgr *ValidatorMgrFilterer) WatchPause(opts *bind.WatchOpts, sink chan<- *ValidatorMgrPause) (event.Subscription, error) {

	logs, sub, err := _ValidatorMgr.contract.WatchLogs(opts, "Pause")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorMgrPause)
				if err := _ValidatorMgr.contract.UnpackLog(event, "Pause", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ValidatorMgrUnpauseIterator is returned from FilterUnpause and is used to iterate over the raw logs and unpacked data for Unpause events raised by the ValidatorMgr contract.
type ValidatorMgrUnpauseIterator struct {
	Event *ValidatorMgrUnpause // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  kowala.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValidatorMgrUnpauseIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValidatorMgrUnpause)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValidatorMgrUnpause)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValidatorMgrUnpauseIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValidatorMgrUnpauseIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValidatorMgrUnpause represents a Unpause event raised by the ValidatorMgr contract.
type ValidatorMgrUnpause struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterUnpause is a free log retrieval operation binding the contract event 0x7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33.
//
// Solidity: e Unpause()
func (_ValidatorMgr *ValidatorMgrFilterer) FilterUnpause(opts *bind.FilterOpts) (*ValidatorMgrUnpauseIterator, error) {

	logs, sub, err := _ValidatorMgr.contract.FilterLogs(opts, "Unpause")
	if err != nil {
		return nil, err
	}
	return &ValidatorMgrUnpauseIterator{contract: _ValidatorMgr.contract, event: "Unpause", logs: logs, sub: sub}, nil
}

// WatchUnpause is a free log subscription operation binding the contract event 0x7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33.
//
// Solidity: e Unpause()
func (_ValidatorMgr *ValidatorMgrFilterer) WatchUnpause(opts *bind.WatchOpts, sink chan<- *ValidatorMgrUnpause) (event.Subscription, error) {

	logs, sub, err := _ValidatorMgr.contract.WatchLogs(opts, "Unpause")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValidatorMgrUnpause)
				if err := _ValidatorMgr.contract.UnpackLog(event, "Unpause", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
