// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../truffle/node_modules/zos-lib/contracts/upgradeability/UpgradeabilityProxyFactory.sol (2.108kB)

package proxy

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _TruffleNode_modulesZosLibContractsUpgradeabilityUpgradeabilityproxyfactorySol = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x41\x6f\xdb\x3c\x0c\xbd\xfb\x57\x10\xf8\x0e\x4d\x82\xc6\xfe\x30\xf4\xb4\x60\xc0\x8a\x6e\x03\x7a\xdb\x61\xbb\xae\xa0\x25\xd6\x26\x20\x4b\x9e\x44\x27\xf5\x86\xfe\xf7\x41\x92\x9d\x35\x69\x5a\xf4\x50\xa0\xbb\x14\x75\xf8\xf4\xf8\xf8\x48\x4a\xbd\xc7\xa6\x43\x08\xce\xb0\x66\x19\xe1\xc7\xff\xe5\x45\xf9\xee\x62\x53\x14\xdc\xf5\xce\x0b\x9c\x95\xd5\xa5\xee\xd8\x7e\xef\x1b\x8f\x9a\xb0\x66\xc3\x32\x7e\xf5\xee\x6e\x2c\x83\x33\x67\x9b\xa2\xa8\x56\xab\x02\x56\xf0\x51\x58\x0c\xc1\x09\xe0\x17\x54\xe2\xfc\x98\x40\x9a\xb6\x30\x7d\x83\x38\x50\x9e\x50\x08\x86\x83\x43\xd0\x7b\x77\xc7\x14\xca\x02\x56\x55\xa1\x9c\x15\x8f\x4a\x9e\x61\x86\xdf\x05\x40\x92\x01\x73\x8e\xcf\x1d\x8b\x90\x86\x5d\x4b\x16\x10\x2c\xed\x12\xeb\x08\x1c\xa6\xa4\xba\x9c\xe0\x3d\x7a\xec\xa6\xe8\xa5\xd6\x9e\x42\x00\x77\x0b\xd2\xd2\x8c\xcc\xc1\x8c\xaf\x0a\x00\xda\x92\x15\x48\x0a\xae\x32\x62\x81\xd3\xc1\x84\x5c\x6e\x8a\x47\x82\x32\x30\x00\xda\x53\xd5\x8e\xb0\x63\x69\x63\x90\x2d\x0b\xa3\x01\xee\x7a\x43\x1d\x59\x41\x61\x67\x0f\xb5\x62\xec\xc8\xb1\xd6\x4c\x93\x42\x87\xe8\x43\xa6\xe3\x63\xcf\xe7\xf3\x24\x83\x7f\x74\x66\xef\xe6\x5f\x4b\x6e\x07\xab\x12\x7d\xb6\x2c\x79\xb3\x37\x25\x89\x3a\x87\xf9\xf3\x30\xd5\x12\xfa\xa1\x36\xac\x20\xe7\x0a\xb0\x78\x6a\xe0\x96\xa9\xcf\x00\x4f\xc5\x27\x0b\x3e\xc0\xcd\x43\x11\x47\xd9\x36\x89\x22\xab\x57\x2d\xda\x86\x12\xdd\x22\x69\x9c\xa2\x53\xd5\x09\x14\x7f\xb9\x7f\xed\x76\x02\x5a\x0d\x0a\x8d\x09\xc0\x32\x79\xfd\xad\xe5\x10\xa7\x73\x08\x74\x3b\x98\xb8\x1c\xd3\x59\xfe\x45\xfb\x06\x33\x69\x98\x17\xe2\xad\x66\x22\x33\x68\x14\x84\x4f\xf1\x8f\x38\x08\x64\x35\x60\x80\x2e\x34\x65\x0a\xb0\x4d\x44\xc6\xed\xc0\xd0\x96\x4c\x2a\x76\x22\xb8\x16\x08\xad\x1b\x8c\x06\xb6\xca\x0c\x3a\x57\x17\xb8\xb1\x28\x83\xa7\xe4\x4d\x12\x1f\xf3\x90\x90\xdf\xeb\xda\x0f\x99\x38\xa8\x29\xb3\x45\x62\xd2\xe7\x31\xbb\xa6\xa0\x3c\xd7\x14\x89\x73\xb0\x15\xe9\xc3\xfb\xaa\x9a\xef\xb7\xd2\x13\x6a\x69\x49\x3b\x15\x4a\x76\x15\xd9\x4a\x47\x79\xae\xaf\xb0\xe6\x75\xe8\x49\x95\xad\x74\xe6\xbf\x39\xd3\x3a\x90\xa1\x78\xc7\xac\xd1\xea\x35\xfa\x66\x88\x76\xac\xc9\x2a\xa7\xd9\x36\xaf\xb2\x26\x97\x56\x5f\xa1\x31\x2f\xdb\x96\x73\xa8\xc7\x38\x77\xd1\xe5\xfd\xe6\xf4\x38\x62\x6d\xe8\x9f\xda\xa0\x9f\x03\x7b\x9a\x6b\x5a\xe4\x6b\xb1\x4c\x53\xb0\x45\x33\xd0\x22\x8e\x4a\xfa\x6f\xb9\x48\xb5\xbc\x7c\xf5\xae\xad\x90\xb7\x68\x0e\xc6\x61\x7a\x48\x1e\xae\xa3\xa1\x87\xee\xbf\xcd\x6d\x78\x73\xea\x3a\x3c\xbe\xff\x78\x2e\xe8\xf5\xfa\x17\x35\x3d\x05\x3a\xdd\x4f\xea\xf8\xe8\x49\x9b\x9f\xb2\xd3\x6d\xb9\x2f\xfe\x04\x00\x00\xff\xff\xca\xec\xc2\x1a\x3c\x08\x00\x00")

func TruffleNode_modulesZosLibContractsUpgradeabilityUpgradeabilityproxyfactorySolBytes() ([]byte, error) {
	return bindataRead(
		_TruffleNode_modulesZosLibContractsUpgradeabilityUpgradeabilityproxyfactorySol,
		"../../truffle/node_modules/zos-lib/contracts/upgradeability/UpgradeabilityProxyFactory.sol",
	)
}

func TruffleNode_modulesZosLibContractsUpgradeabilityUpgradeabilityproxyfactorySol() (*asset, error) {
	bytes, err := TruffleNode_modulesZosLibContractsUpgradeabilityUpgradeabilityproxyfactorySolBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../truffle/node_modules/zos-lib/contracts/upgradeability/UpgradeabilityProxyFactory.sol", size: 2108, mode: os.FileMode(420), modTime: time.Unix(1534968025, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc7, 0xaa, 0x6, 0x50, 0x3e, 0x0, 0xa2, 0xb4, 0x91, 0x85, 0x3a, 0xdc, 0x5a, 0xa3, 0xc4, 0x9d, 0x2c, 0x4, 0x24, 0x0, 0x41, 0xd7, 0x82, 0xe3, 0x19, 0xaf, 0x32, 0xec, 0x57, 0x67, 0x51, 0x12}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../truffle/node_modules/zos-lib/contracts/upgradeability/UpgradeabilityProxyFactory.sol": TruffleNode_modulesZosLibContractsUpgradeabilityUpgradeabilityproxyfactorySol,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"truffle": &bintree{nil, map[string]*bintree{
				"node_modules": &bintree{nil, map[string]*bintree{
					"zos-lib": &bintree{nil, map[string]*bintree{
						"contracts": &bintree{nil, map[string]*bintree{
							"upgradeability": &bintree{nil, map[string]*bintree{
								"UpgradeabilityProxyFactory.sol": &bintree{TruffleNode_modulesZosLibContractsUpgradeabilityUpgradeabilityproxyfactorySol, map[string]*bintree{}},
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
