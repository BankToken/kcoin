// Code generated by go-bindata. DO NOT EDIT.
// sources:
// SystemVars.sol

package files

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _systemvarsSol = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\x5d\x73\xa3\x36\x14\x7d\xf7\xaf\xb8\xb3\x0f\x5b\xf0\x26\xc6\xc9\xa4\x9d\x4e\x3d\x4e\x43\x0d\xe9\xd0\xf1\xd7\x60\xbc\xdb\xf6\x85\x91\xb1\x12\xd4\x82\xc4\x48\xc2\x1b\xa7\x93\xff\xde\x41\x02\x07\x0c\x76\xdd\xb7\xd6\x0f\x24\xb6\xce\xfd\x3c\xe7\x5e\x94\x71\xf4\x9c\x22\x10\x2c\x21\x5b\x22\xf7\x30\x1c\xdc\x0d\x6e\xef\x46\xbd\x1e\x49\x33\xc6\x25\x7c\x60\x19\xa6\xaf\x38\xcb\x70\x42\xe8\x75\x05\xb3\x22\x46\x25\x47\x91\x14\x56\x8a\x64\x6c\xcd\x90\x8c\x07\x82\x25\x1f\x46\x07\xbb\x57\x26\xae\x13\xb2\xa9\x23\xc9\x33\x47\x92\x30\x2a\x2c\x8f\x12\x49\x50\x42\x5e\xd1\x26\xc1\xa5\x61\xcf\xea\xf7\x7b\xd0\x87\x07\x49\x64\x82\x61\xb5\x17\x12\xa7\xf0\x19\x71\x52\x80\x44\x0f\xfa\x56\xaf\x72\x56\x9e\x7e\x46\x5c\x00\x11\xd0\x70\xf7\x57\x0f\x00\x40\x3d\x72\x42\x25\x44\x8c\x0a\x89\xa8\x04\x6f\xee\x05\x9e\x3d\x0d\x67\xde\x3c\x70\x9d\xd0\x9e\x2d\xd6\xf3\x00\xc6\x70\x77\x0b\x58\xc6\x98\x8f\xce\xd8\x4c\xec\x25\xc0\x18\xbe\x3f\x03\x5d\x05\xf6\x4f\xde\xd4\xfb\xdd\x75\xc2\xa5\xef\x4d\x5c\x18\xc3\xcd\x69\xb4\xed\xfc\xb2\x5e\x05\x33\x77\x1e\x84\x8f\xf6\x24\x58\xf8\x05\x7c\x38\x1c\x0e\xbb\xc0\xd3\xc5\x97\x70\xb5\x5e\x2e\xa7\xbf\x85\x33\x37\xf0\xbd\x49\x05\x1e\x0e\x4f\x47\x98\xd9\xbf\x86\xeb\xb9\xe3\xfa\xe1\x7c\xe1\xcf\x8a\x1a\x16\x73\xc7\x0b\xbc\xc5\x7c\x55\x98\xe3\x9b\xdb\x2e\x2b\xc7\x7d\xb4\xd7\xd3\x20\x5c\xf8\xf6\x64\xea\x86\xbe\xfb\xc5\xf6\x9d\xf3\xa5\x94\x50\xc7\x75\xd6\x93\xc2\x7d\xf8\xe8\xdb\xea\x9f\xa2\xb7\xa3\xde\xbb\x45\x96\x6f\x12\x12\x41\xc6\xf1\x6e\x92\x73\x8e\x69\xb4\x5f\x72\x12\xe1\x51\x0b\x12\x5d\x76\xbc\xca\xb3\x2c\xd9\xb7\xcf\x53\x42\x25\xde\xfa\xf8\x2b\xe2\xdb\x32\x01\x25\xae\xe2\xd3\x87\x49\x91\x38\xcf\x23\xc9\xf8\xa0\xfa\xed\x21\x43\x1c\xa5\x10\x12\xad\x24\x15\x17\xca\x2f\x90\xa9\x6f\x4f\x8c\x83\x8c\x31\x08\x25\xbd\x6f\xc4\x21\x8b\x13\x3e\x74\x72\x65\x2e\x80\x52\x96\x53\x09\x8c\x2a\x1f\xcf\x98\x62\x41\x04\x6c\x12\x16\xfd\x59\xda\x5b\xea\xef\x53\x4e\xa3\x62\x46\x6a\x0a\x37\x54\x69\x8d\xd4\xae\xa0\xf1\x9b\x0e\x65\x56\xe5\xeb\x09\x28\x3e\xad\x56\xc3\xb8\xe9\x68\x74\x80\x46\x97\xc1\xea\xad\xad\xa1\xea\x4c\xd4\xbd\x95\x4d\xe8\x06\xbe\xb5\xa8\x21\xd5\x20\xe3\xf7\x46\x14\x7d\x5f\x72\xf6\xb2\x87\x25\x92\x12\x73\xfa\x1f\x26\xed\x3d\xff\xcb\x49\x23\xe2\xb0\xbe\x30\xff\x9f\x52\x78\x68\x40\x18\x23\xe1\x52\x96\x3f\xc7\x1a\x65\x98\x05\x11\x3b\x24\x31\xec\x08\xfe\x0a\x1c\xcb\x9c\x53\x01\xc6\x86\xb1\xc4\xac\x95\xa9\x0f\x8e\x83\xde\x8f\xdb\xbb\xef\x44\xe0\x08\x65\x27\x83\xa9\xbe\x6b\x32\x3b\x62\x1a\x86\xa1\x28\x1d\xd0\x3c\xdd\x60\x0e\x9f\xe0\xc6\x84\xfb\xe2\xf1\xf1\x63\x47\x41\x26\xfc\x78\x94\xa6\xa5\x76\x31\xfc\x50\x7f\x5b\x9c\x52\xf8\xc3\x16\xef\xe0\x67\x2c\x95\xa2\xb4\x1b\xd9\x56\xa7\x56\x6f\xb7\xc6\xd4\x91\x71\x18\xf6\x8e\x4a\x15\xe2\x4c\x73\x6b\x7a\xf8\x87\x04\xab\x01\x78\x82\x88\x11\x2a\x40\xc6\x48\x82\x88\x59\x9e\x6c\x61\x83\x4b\x25\x75\xa7\xa9\xcf\x6c\xe5\xe0\x5c\xb6\xf5\x3c\xc9\x13\x74\x71\x31\x1e\x17\xcf\xb2\x88\xce\xb7\x78\xb9\xe4\x0f\xef\x01\xb4\xfd\x23\x17\x32\x2d\x7a\x3b\x6e\xe8\xdd\x6a\xbd\x77\x47\xcd\xe8\xcd\x19\xba\x6f\x8f\x9f\x52\x85\xd1\x9e\xca\xfb\xd6\x05\xc0\xac\x97\x56\xa3\x41\x5d\x96\x52\x42\x6f\xbf\xfd\xce\x68\xcc\xe2\xa7\x5a\xde\x57\xa5\xa2\xcd\xf7\xfc\xde\x8e\xf9\xd4\x8e\xd0\x4b\xcb\xd1\x75\xc3\xd1\x99\x8b\x80\x79\x91\x0a\x18\x47\x51\x82\x61\x8b\xb7\xb9\xe2\xf6\x68\x77\xd6\x99\x56\xf8\xe6\xf6\xac\x56\x70\x25\x76\xcd\x6f\xb7\x68\x74\x24\xa7\x0a\xa4\xe5\x5c\xf7\x7f\xa1\x90\xca\x06\x9d\xbe\x99\xf4\x9b\x59\x5b\xc5\x75\xea\xdf\xf4\x82\xab\x46\x9f\x2b\x42\x53\x71\xa9\xf2\x3b\xa4\xd1\x79\x13\xbb\x02\x19\x13\x31\xd8\xa0\x04\xd1\x08\x9b\xdd\xbb\x90\xe3\x1d\xe6\xf2\x31\xa7\x91\xd1\x71\x27\xd0\xa7\xc6\xc1\xf6\xed\xef\x00\x00\x00\xff\xff\x05\x87\xde\x28\x03\x0c\x00\x00")

func systemvarsSolBytes() ([]byte, error) {
	return bindataRead(
		_systemvarsSol,
		"SystemVars.sol",
	)
}

func systemvarsSol() (*asset, error) {
	bytes, err := systemvarsSolBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "SystemVars.sol", size: 3075, mode: os.FileMode(420), modTime: time.Unix(1539967674, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3, 0x23, 0x65, 0x86, 0x60, 0x76, 0x8a, 0xf, 0x80, 0xac, 0x98, 0x88, 0x51, 0x69, 0x48, 0x30, 0x2, 0x33, 0xa3, 0x7b, 0x83, 0xf7, 0xfc, 0x26, 0x7e, 0xbd, 0x6b, 0x7e, 0xaa, 0x52, 0x14, 0xbb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"SystemVars.sol": systemvarsSol,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"SystemVars.sol": &bintree{systemvarsSol, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
